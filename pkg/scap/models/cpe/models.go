// Code generated by https://github.com/gocomply/xsd2go; DO NOT EDIT.
// Models for http://cpe.mitre.org/naming/2.0
package cpe

import (
	"encoding/xml"
)

// Element
type PlatformSpecification struct {
	XMLName xml.Name `xml:platform-specification`

	Platform []Platform `xml:"platform"`
}

// Element
type Platform struct {
	XMLName xml.Name `xml:platform`

	Id string `xml:"id,attr"`

	Title []TextType `xml:"title"`

	Remark []TextType `xml:"remark"`

	LogicalTest LogicalTest `xml:"logical-test"`
}

// Element
type PlatformConfiguration struct {
	XMLName xml.Name `xml:platform-configuration`

	Title []TextType `xml:"title"`

	Remark []TextType `xml:"remark"`

	LogicalTest LogicalTest `xml:"logical-test"`
}

// Element
type LogicalTest struct {
	XMLName xml.Name `xml:logical-test`

	Operator string `xml:"operator,attr"`

	Negate string `xml:"negate,attr"`

	LogicalTest []LogicalTestType `xml:"logical-test"`

	FactRef []FactRef `xml:"fact-ref"`

	CheckFactRef []CheckFactRef `xml:"check-fact-ref"`
}

// Element
type FactRef struct {
	XMLName xml.Name `xml:fact-ref`

	Name string `xml:"name,attr"`

	Description string `xml:"description,attr,omitempty"`
}

// Element
type CheckFactRef struct {
	XMLName xml.Name `xml:check-fact-ref`

	System string `xml:"system,attr"`

	Href string `xml:"href,attr"`

	IdRef string `xml:"id-ref,attr"`

	Description string `xml:"description,attr,omitempty"`
}

// XSD ComplexType declarations

type PlatformSpecificationType struct {
	Platform []Platform `xml:"platform"`

	InnerXml string `xml:",innerxml"`
}

type PlatformBaseType struct {
	Title []TextType `xml:"title"`

	Remark []TextType `xml:"remark"`

	LogicalTest LogicalTest `xml:"logical-test"`

	InnerXml string `xml:",innerxml"`
}

type PlatformType struct {
	Id string `xml:"id,attr"`

	Title []TextType `xml:"title"`

	Remark []TextType `xml:"remark"`

	LogicalTest LogicalTest `xml:"logical-test"`

	InnerXml string `xml:",innerxml"`
}

type LogicalTestType struct {
	Operator string `xml:"operator,attr"`

	Negate string `xml:"negate,attr"`

	LogicalTest []LogicalTestType `xml:"logical-test"`

	FactRef []FactRef `xml:"fact-ref"`

	CheckFactRef []CheckFactRef `xml:"check-fact-ref"`

	InnerXml string `xml:",innerxml"`
}

type FactRefType struct {
	Description string `xml:"description,attr,omitempty"`

	InnerXml string `xml:",innerxml"`
}

type CPEFactRefType struct {
	Name string `xml:"name,attr"`

	Description string `xml:"description,attr,omitempty"`

	InnerXml string `xml:",innerxml"`
}

type CheckFactRefType struct {
	System string `xml:"system,attr"`

	Href string `xml:"href,attr"`

	IdRef string `xml:"id-ref,attr"`

	Description string `xml:"description,attr,omitempty"`

	InnerXml string `xml:",innerxml"`
}

type TextType struct {
	XmlLang string `xml:"lang,attr"`

	Text     string `xml:",chardata"`
	InnerXml string `xml:",innerxml"`
}

type Cpe23Type string

type Cpe22Type string
