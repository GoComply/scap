// Code generated by https://github.com/gocomply/xsd2go; DO NOT EDIT.
// Models for http://oval.mitre.org/XMLSchema/oval-definitions-5#junos
package junos_def

import (
	"encoding/xml"
	"github.com/gocomply/scap/pkg/scap/models/oval"
	"github.com/gocomply/scap/pkg/scap/models/oval_def"
	"github.com/gocomply/scap/pkg/scap/models/xml_dsig"
)

// Element
type XmlConfigTest struct {
	XMLName xml.Name `xml:xml_config_test`

	Id oval.TestIDPattern `xml:"id,attr"`

	Version int `xml:"version,attr"`

	CheckExistence oval.ExistenceEnumeration `xml:"check_existence,attr,omitempty"`

	Check oval.CheckEnumeration `xml:"check,attr"`

	StateOperator oval.OperatorEnumeration `xml:"state_operator,attr,omitempty"`

	Comment oval.NonEmptyStringType `xml:"comment,attr"`

	Deprecated bool `xml:"deprecated,attr,omitempty"`

	Object oval_def.ObjectRefType `xml:"object"`

	State []oval_def.StateRefType `xml:"state"`

	Signature *xml_dsig.SignatureType `xml:"Signature"`

	Notes *oval.NotesType `xml:"notes"`

	InnerXml string `xml:",innerxml"`
}

// Element
type XmlConfigObject struct {
	XMLName xml.Name `xml:xml_config_object`

	Id oval.ObjectIDPattern `xml:"id,attr"`

	Version int `xml:"version,attr"`

	Comment oval.NonEmptyStringType `xml:"comment,attr,omitempty"`

	Deprecated bool `xml:"deprecated,attr,omitempty"`

	Set *oval_def.Set `xml:"set"`

	Xpath *oval_def.EntityObjectStringType `xml:"xpath"`

	Filter []oval_def.Filter `xml:"filter"`

	Signature *xml_dsig.SignatureType `xml:"Signature"`

	Notes *oval.NotesType `xml:"notes"`

	InnerXml string `xml:",innerxml"`
}

// Element
type XmlConfigState struct {
	XMLName xml.Name `xml:xml_config_state`

	Id oval.StateIDPattern `xml:"id,attr"`

	Version int `xml:"version,attr"`

	Operator oval.OperatorEnumeration `xml:"operator,attr,omitempty"`

	Comment oval.NonEmptyStringType `xml:"comment,attr,omitempty"`

	Deprecated bool `xml:"deprecated,attr,omitempty"`

	Xpath *oval_def.EntityStateStringType `xml:"xpath"`

	ValueOf *oval_def.EntityStateAnySimpleType `xml:"value_of"`

	Signature *xml_dsig.SignatureType `xml:"Signature"`

	Notes *oval.NotesType `xml:"notes"`

	InnerXml string `xml:",innerxml"`
}

// Element
type ShowTest struct {
	XMLName xml.Name `xml:show_test`

	Id oval.TestIDPattern `xml:"id,attr"`

	Version int `xml:"version,attr"`

	CheckExistence oval.ExistenceEnumeration `xml:"check_existence,attr,omitempty"`

	Check oval.CheckEnumeration `xml:"check,attr"`

	StateOperator oval.OperatorEnumeration `xml:"state_operator,attr,omitempty"`

	Comment oval.NonEmptyStringType `xml:"comment,attr"`

	Deprecated bool `xml:"deprecated,attr,omitempty"`

	Object oval_def.ObjectRefType `xml:"object"`

	State []oval_def.StateRefType `xml:"state"`

	Signature *xml_dsig.SignatureType `xml:"Signature"`

	Notes *oval.NotesType `xml:"notes"`

	InnerXml string `xml:",innerxml"`
}

// Element
type ShowObject struct {
	XMLName xml.Name `xml:show_object`

	Id oval.ObjectIDPattern `xml:"id,attr"`

	Version int `xml:"version,attr"`

	Comment oval.NonEmptyStringType `xml:"comment,attr,omitempty"`

	Deprecated bool `xml:"deprecated,attr,omitempty"`

	Set *oval_def.Set `xml:"set"`

	Subcommand *oval_def.EntityObjectStringType `xml:"subcommand"`

	Filter []oval_def.Filter `xml:"filter"`

	Signature *xml_dsig.SignatureType `xml:"Signature"`

	Notes *oval.NotesType `xml:"notes"`

	InnerXml string `xml:",innerxml"`
}

// Element
type ShowState struct {
	XMLName xml.Name `xml:show_state`

	Id oval.StateIDPattern `xml:"id,attr"`

	Version int `xml:"version,attr"`

	Operator oval.OperatorEnumeration `xml:"operator,attr,omitempty"`

	Comment oval.NonEmptyStringType `xml:"comment,attr,omitempty"`

	Deprecated bool `xml:"deprecated,attr,omitempty"`

	Subcommand *oval_def.EntityStateStringType `xml:"subcommand"`

	Value *oval_def.EntityStateStringType `xml:"value"`

	Signature *xml_dsig.SignatureType `xml:"Signature"`

	Notes *oval.NotesType `xml:"notes"`

	InnerXml string `xml:",innerxml"`
}

// Element
type VersionTest struct {
	XMLName xml.Name `xml:version_test`

	Id oval.TestIDPattern `xml:"id,attr"`

	Version int `xml:"version,attr"`

	CheckExistence oval.ExistenceEnumeration `xml:"check_existence,attr,omitempty"`

	Check oval.CheckEnumeration `xml:"check,attr"`

	StateOperator oval.OperatorEnumeration `xml:"state_operator,attr,omitempty"`

	Comment oval.NonEmptyStringType `xml:"comment,attr"`

	Deprecated bool `xml:"deprecated,attr,omitempty"`

	Object oval_def.ObjectRefType `xml:"object"`

	State []oval_def.StateRefType `xml:"state"`

	Signature *xml_dsig.SignatureType `xml:"Signature"`

	Notes *oval.NotesType `xml:"notes"`

	InnerXml string `xml:",innerxml"`
}

// Element
type VersionObject struct {
	XMLName xml.Name `xml:version_object`

	Id oval.ObjectIDPattern `xml:"id,attr"`

	Version int `xml:"version,attr"`

	Comment oval.NonEmptyStringType `xml:"comment,attr,omitempty"`

	Deprecated bool `xml:"deprecated,attr,omitempty"`

	Set *oval_def.Set `xml:"set"`

	Component *oval_def.EntityObjectStringType `xml:"component"`

	Filter []oval_def.Filter `xml:"filter"`

	Signature *xml_dsig.SignatureType `xml:"Signature"`

	Notes *oval.NotesType `xml:"notes"`

	InnerXml string `xml:",innerxml"`
}

// Element
type VersionState struct {
	XMLName xml.Name `xml:version_state`

	Id oval.StateIDPattern `xml:"id,attr"`

	Version int `xml:"version,attr"`

	Operator oval.OperatorEnumeration `xml:"operator,attr,omitempty"`

	Comment oval.NonEmptyStringType `xml:"comment,attr,omitempty"`

	Deprecated bool `xml:"deprecated,attr,omitempty"`

	Component *oval_def.EntityStateStringType `xml:"component"`

	RawValue *oval_def.EntityStateStringType `xml:"raw_value"`

	Major *oval_def.EntityStateIntType `xml:"major"`

	Minor *oval_def.EntityStateIntType `xml:"minor"`

	Type *EntityStateJunosReleaseTypeType `xml:"type"`

	Build *oval_def.EntityStateIntType `xml:"build"`

	MaintenanceRelease *oval_def.EntityStateIntType `xml:"maintenance_release"`

	Spin *oval_def.EntityStateIntType `xml:"spin"`

	BuildDate *oval_def.EntityStateIntType `xml:"build_date"`

	Signature *xml_dsig.SignatureType `xml:"Signature"`

	Notes *oval.NotesType `xml:"notes"`

	InnerXml string `xml:",innerxml"`
}

// Element
type XmlShowTest struct {
	XMLName xml.Name `xml:xml_show_test`

	Id oval.TestIDPattern `xml:"id,attr"`

	Version int `xml:"version,attr"`

	CheckExistence oval.ExistenceEnumeration `xml:"check_existence,attr,omitempty"`

	Check oval.CheckEnumeration `xml:"check,attr"`

	StateOperator oval.OperatorEnumeration `xml:"state_operator,attr,omitempty"`

	Comment oval.NonEmptyStringType `xml:"comment,attr"`

	Deprecated bool `xml:"deprecated,attr,omitempty"`

	Object oval_def.ObjectRefType `xml:"object"`

	State []oval_def.StateRefType `xml:"state"`

	Signature *xml_dsig.SignatureType `xml:"Signature"`

	Notes *oval.NotesType `xml:"notes"`

	InnerXml string `xml:",innerxml"`
}

// Element
type XmlShowObject struct {
	XMLName xml.Name `xml:xml_show_object`

	Id oval.ObjectIDPattern `xml:"id,attr"`

	Version int `xml:"version,attr"`

	Comment oval.NonEmptyStringType `xml:"comment,attr,omitempty"`

	Deprecated bool `xml:"deprecated,attr,omitempty"`

	Set *oval_def.Set `xml:"set"`

	Subcommand *oval_def.EntityObjectStringType `xml:"subcommand"`

	Xpath *oval_def.EntityObjectStringType `xml:"xpath"`

	Filter []oval_def.Filter `xml:"filter"`

	Signature *xml_dsig.SignatureType `xml:"Signature"`

	Notes *oval.NotesType `xml:"notes"`

	InnerXml string `xml:",innerxml"`
}

// Element
type XmlShowState struct {
	XMLName xml.Name `xml:xml_show_state`

	Id oval.StateIDPattern `xml:"id,attr"`

	Version int `xml:"version,attr"`

	Operator oval.OperatorEnumeration `xml:"operator,attr,omitempty"`

	Comment oval.NonEmptyStringType `xml:"comment,attr,omitempty"`

	Deprecated bool `xml:"deprecated,attr,omitempty"`

	Subcommand *oval_def.EntityStateStringType `xml:"subcommand"`

	Xpath *oval_def.EntityStateStringType `xml:"xpath"`

	ValueOf *oval_def.EntityStateAnySimpleType `xml:"value_of"`

	Signature *xml_dsig.SignatureType `xml:"Signature"`

	Notes *oval.NotesType `xml:"notes"`

	InnerXml string `xml:",innerxml"`
}

// XSD ComplexType declarations

type EntityStateJunosReleaseTypeType struct {
	XMLName xml.Name

	EntityCheck string `xml:"entity_check,attr,omitempty"`

	CheckExistence string `xml:"check_existence,attr,omitempty"`

	Datatype oval.DatatypeEnumeration `xml:"datatype,attr,omitempty"`

	Operation oval.OperationEnumeration `xml:"operation,attr,omitempty"`

	Mask bool `xml:"mask,attr,omitempty"`

	VarRef oval.VariableIDPattern `xml:"var_ref,attr,omitempty"`

	VarCheck oval.CheckEnumeration `xml:"var_check,attr,omitempty"`

	InnerXml string `xml:",innerxml"`
}

// XSD SimpleType declarations
