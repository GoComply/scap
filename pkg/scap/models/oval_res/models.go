// Code generated by https://github.com/gocomply/xsd2go; DO NOT EDIT.
// Models for http://oval.mitre.org/XMLSchema/oval-results-5
package oval_res

import (
	"encoding/xml"
	"github.com/gocomply/scap/pkg/scap/models/oval"
	"github.com/gocomply/scap/pkg/scap/models/oval_def"
	"github.com/gocomply/scap/pkg/scap/models/oval_sc"
	"github.com/gocomply/scap/pkg/scap/models/xml_dsig"
)

// Element
type OvalResults struct {
	XMLName xml.Name `xml:oval_results`

	Generator oval.GeneratorType `xml:"generator"`

	Directives DefaultDirectivesType `xml:"directives"`

	ClassDirectives []ClassDirectivesType `xml:"class_directives"`

	OvalDefinitions *oval_def.OvalDefinitions `xml:"oval_definitions"`

	Results ResultsType `xml:"results"`

	Signature *xml_dsig.SignatureType `xml:"Signature"`
}

// XSD ComplexType declarations

type DirectivesType struct {
	XMLName xml.Name

	DefinitionTrue DirectiveType `xml:"definition_true"`

	DefinitionFalse DirectiveType `xml:"definition_false"`

	DefinitionUnknown DirectiveType `xml:"definition_unknown"`

	DefinitionError DirectiveType `xml:"definition_error"`

	DefinitionNotEvaluated DirectiveType `xml:"definition_not_evaluated"`

	DefinitionNotApplicable DirectiveType `xml:"definition_not_applicable"`

	InnerXml string `xml:",innerxml"`
}

type DefaultDirectivesType struct {
	XMLName xml.Name

	IncludeSourceDefinitions bool `xml:"include_source_definitions,attr,omitempty"`

	DefinitionTrue DirectiveType `xml:"definition_true"`

	DefinitionFalse DirectiveType `xml:"definition_false"`

	DefinitionUnknown DirectiveType `xml:"definition_unknown"`

	DefinitionError DirectiveType `xml:"definition_error"`

	DefinitionNotEvaluated DirectiveType `xml:"definition_not_evaluated"`

	DefinitionNotApplicable DirectiveType `xml:"definition_not_applicable"`

	InnerXml string `xml:",innerxml"`
}

type ClassDirectivesType struct {
	XMLName xml.Name

	Class oval.ClassEnumeration `xml:"class,attr"`

	DefinitionTrue DirectiveType `xml:"definition_true"`

	DefinitionFalse DirectiveType `xml:"definition_false"`

	DefinitionUnknown DirectiveType `xml:"definition_unknown"`

	DefinitionError DirectiveType `xml:"definition_error"`

	DefinitionNotEvaluated DirectiveType `xml:"definition_not_evaluated"`

	DefinitionNotApplicable DirectiveType `xml:"definition_not_applicable"`

	InnerXml string `xml:",innerxml"`
}

type DirectiveType struct {
	XMLName xml.Name

	Reported bool `xml:"reported,attr"`

	Content ContentEnumeration `xml:"content,attr,omitempty"`

	InnerXml string `xml:",innerxml"`
}

type ResultsType struct {
	XMLName xml.Name

	System []SystemType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type SystemType struct {
	XMLName xml.Name

	Definitions *DefinitionsType `xml:"definitions"`

	Tests *TestsType `xml:"tests"`

	OvalSystemCharacteristics oval_sc.OvalSystemCharacteristics `xml:"oval_system_characteristics"`

	InnerXml string `xml:",innerxml"`
}

type DefinitionsType struct {
	XMLName xml.Name

	Definition []DefinitionType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type DefinitionType struct {
	XMLName xml.Name

	DefinitionId oval.DefinitionIDPattern `xml:"definition_id,attr"`

	Version int `xml:"version,attr"`

	VariableInstance int `xml:"variable_instance,attr,omitempty"`

	Class oval.ClassEnumeration `xml:"class,attr,omitempty"`

	Result ResultEnumeration `xml:"result,attr"`

	Message []oval.MessageType `xml:"message"`

	Criteria *CriteriaType `xml:"criteria"`

	InnerXml string `xml:",innerxml"`
}

type CriteriaType struct {
	XMLName xml.Name

	ApplicabilityCheck bool `xml:"applicability_check,attr,omitempty"`

	Operator oval.OperatorEnumeration `xml:"operator,attr"`

	Negate bool `xml:"negate,attr,omitempty"`

	Result ResultEnumeration `xml:"result,attr"`

	Criteria []CriteriaType `xml:"criteria"`

	Criterion []CriterionType `xml:"criterion"`

	ExtendDefinition []ExtendDefinitionType `xml:"extend_definition"`

	InnerXml string `xml:",innerxml"`
}

type CriterionType struct {
	XMLName xml.Name

	ApplicabilityCheck bool `xml:"applicability_check,attr,omitempty"`

	TestRef oval.TestIDPattern `xml:"test_ref,attr"`

	Version int `xml:"version,attr"`

	VariableInstance int `xml:"variable_instance,attr,omitempty"`

	Negate bool `xml:"negate,attr,omitempty"`

	Result ResultEnumeration `xml:"result,attr"`

	InnerXml string `xml:",innerxml"`
}

type ExtendDefinitionType struct {
	XMLName xml.Name

	ApplicabilityCheck bool `xml:"applicability_check,attr,omitempty"`

	DefinitionRef oval.DefinitionIDPattern `xml:"definition_ref,attr"`

	Version int `xml:"version,attr"`

	VariableInstance int `xml:"variable_instance,attr,omitempty"`

	Negate bool `xml:"negate,attr,omitempty"`

	Result ResultEnumeration `xml:"result,attr"`

	InnerXml string `xml:",innerxml"`
}

type TestsType struct {
	XMLName xml.Name

	Test []TestType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type TestType struct {
	XMLName xml.Name

	TestId oval.TestIDPattern `xml:"test_id,attr"`

	Version int `xml:"version,attr"`

	VariableInstance int `xml:"variable_instance,attr,omitempty"`

	CheckExistence oval.ExistenceEnumeration `xml:"check_existence,attr,omitempty"`

	Check oval.CheckEnumeration `xml:"check,attr"`

	StateOperator oval.OperatorEnumeration `xml:"state_operator,attr,omitempty"`

	Result ResultEnumeration `xml:"result,attr"`

	Message []oval.MessageType `xml:"message"`

	TestedItem []TestedItemType `xml:"tested_item"`

	TestedVariable []TestedVariableType `xml:"tested_variable"`

	InnerXml string `xml:",innerxml"`
}

type TestedItemType struct {
	XMLName xml.Name

	ItemId oval.ItemIDPattern `xml:"item_id,attr"`

	Result ResultEnumeration `xml:"result,attr"`

	Message []oval.MessageType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

type TestedVariableType struct {
	XMLName xml.Name

	VariableId oval.VariableIDPattern `xml:"variable_id,attr"`

	Text     string `xml:",chardata"`
	InnerXml string `xml:",innerxml"`
}

// XSD SimpleType declarations

type ContentEnumeration string

const ContentEnumerationThin ContentEnumeration = "thin"

const ContentEnumerationFull ContentEnumeration = "full"

type ResultEnumeration string

const ResultEnumerationTrue ResultEnumeration = "true"

const ResultEnumerationFalse ResultEnumeration = "false"

const ResultEnumerationUnknown ResultEnumeration = "unknown"

const ResultEnumerationError ResultEnumeration = "error"

const ResultEnumerationNotEvaluated ResultEnumeration = "not evaluated"

const ResultEnumerationNotApplicable ResultEnumeration = "not applicable"
