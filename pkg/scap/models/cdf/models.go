// Code generated by https://github.com/gocomply/xsd2go; DO NOT EDIT.
// Models for http://checklists.nist.gov/xccdf/1.2
package cdf

import (
	"encoding/xml"
	"github.com/gocomply/scap/pkg/scap/models/cpe_language"
)

// This schema defines the Extensible Configuration Checklist Description Format (XCCDF), a data format for defining security benchmarks and checklists, and for recording the results of applying such benchmarks. For more information, consult the specification document, NIST Interagency Report 7275 Revision 4, "Specification for the Extensible Configuration Checklist Description Format Version 1.2". This schema was developed by Neal Ziring, with ideas and assistance from David Waltermire. The following helpful individuals also contributed ideas to the definition of this schema: David Proulx, Andrew Buttner, Ryan Wilson, Matthew Kerr, and Stephen Quinn. Ian Crawford found numerous discrepancies between this schema and the spec document. Peter Mell and his colleagues also made many suggestions.

// Benchmark: This is the root element of the XCCDF document; it must appear exactly once. It encloses the entire benchmark, and contains both descriptive information and structural information. Note that the order of &lt;xccdf:Group&gt; and &lt;xccdf:Rule&gt; child elements may matter for the appearance of a generated document. &lt;xccdf:Group&gt; and &lt;xccdf:Rule&gt; children may be freely intermingled, but they must appear after any &lt;xccdf:Value&gt; children. All the other children must appear in the order shown.
type Benchmark struct {
	XMLName xml.Name `xml:"Benchmark"`

	// Id: Unique &lt;xccdf:Benchmark&gt; identifier.
	Id BenchmarkIdType `xml:"id,attr"`

	// Id2: An identifier used for referencing elements included in an XML signature.
	Id2 string `xml:"Id,attr,omitempty"`

	// Resolved: True if &lt;xccdf:Benchmark&gt; has already undergone the resolution process.
	Resolved bool `xml:"resolved,attr,omitempty"`

	// Style: Name of an &lt;xccdf:Benchmark&gt; authoring style or set of conventions or constraints to which this &lt;xccdf:Benchmark&gt; conforms (e.g., “SCAP 1.2”).
	Style string `xml:"style,attr,omitempty"`

	// StyleHref: URL of a supplementary stylesheet or schema extension that can be used to verify conformance to the named style.
	StyleHref string `xml:"style-href,attr,omitempty"`

	XmlLang string `xml:"lang,attr"`

	// Status: Status of the &lt;xccdf:Benchmark&gt; indicating its level of maturity or consensus. If more than one &lt;xccdf:status&gt; element appears, the element's @date attribute should be included.
	Status []Status `xml:"status"`

	// DcStatus: Holds additional status information using the Dublin Core format.
	DcStatus []DcStatusType `xml:"dc-status"`

	// Title: Title of the &lt;xccdf:Benchmark&gt;; an &lt;xccdf:Benchmark&gt; should have an &lt;xccdf:title&gt;.
	Title []TextType `xml:"title"`

	// Description: Text that describes the &lt;xccdf:Benchmark&gt;; an &lt;xccdf:Benchmark&gt; should have an &lt;xccdf:description&gt;.
	Description []HtmlTextWithSubType `xml:"description"`

	// Notice: Legal notices (licensing information, terms of use, etc.), copyright statements, warnings, and other advisory notices about this &lt;xccdf:Benchmark&gt; and its use.
	Notice []NoticeType `xml:"notice"`

	// FrontMatter: Introductory matter for the beginning of the &lt;xccdf:Benchmark&gt; document; intended for use during Document Generation.
	FrontMatter []HtmlTextWithSubType `xml:"front-matter"`

	// RearMatter: Concluding material for the end of the &lt;xccdf:Benchmark&gt; document; intended for use during Document Generation.
	RearMatter []HtmlTextWithSubType `xml:"rear-matter"`

	// Reference: Supporting references for the &lt;xccdf:Benchmark&gt; document.
	Reference []ReferenceType `xml:"reference"`

	// PlainText: Definitions for reusable text blocks, each with a unique identifier.
	PlainText []PlainTextType `xml:"plain-text"`

	// PlatformSpecification: A list of identifiers for complex platform definitions, written in CPE applicability language format. Authors may define complex platforms within this element, and then use their locally unique identifiers anywhere in the &lt;xccdf:Benchmark&gt; element in place of a CPE name.
	PlatformSpecification *cpe_language.PlatformSpecificationType `xml:"platform-specification"`

	// Platform: Applicable platforms for this &lt;xccdf:Benchmark&gt;. Authors should use the element to identify the systems or products to which the &lt;xccdf:Benchmark&gt; applies.
	Platform []Cpe2IdrefType `xml:"platform"`

	// Version: Version number of the &lt;xccdf:Benchmark&gt;.
	Version VersionType `xml:"version"`

	// Metadata: XML metadata for the &lt;xccdf:Benchmark&gt;. Metadata allows many additional pieces of information, including authorship, publisher, support, and other similar details, to be embedded in an &lt;xccdf:Benchmark&gt;.
	Metadata []MetadataType `xml:"metadata"`

	// Model: URIs of suggested scoring models to be used when computing a score for this &lt;xccdf:Benchmark&gt;. A suggested list of scoring models and their URIs is provided in the XCCDF specification.
	Model []Model `xml:"model"`

	// Profile: &lt;xccdf:Profile&gt; elements that reference and customize sets of items in the &lt;xccdf:Benchmark&gt;.
	Profile []ProfileType `xml:"Profile"`

	// Value: Parameter &lt;xccdf:Value&gt; elements that support &lt;xccdf:Rule&gt; elements and descriptions in the &lt;xccdf:Benchmark&gt;.
	Value []ValueType `xml:"Value"`

	// TestResult: &lt;xccdf:Benchmark&gt; test result records (one per &lt;xccdf:Benchmark&gt; run).
	TestResult []TestResultType `xml:"TestResult"`

	// Signature: A digital signature asserting authorship and allowing verification of the integrity of the &lt;xccdf:Benchmark&gt;.
	Signature *SignatureType `xml:"signature"`

	// Group: &lt;xccdf:Group&gt; elements that comprise the &lt;xccdf:Benchmark&gt;; each may contain additional &lt;xccdf:Value&gt;, &lt;xccdf:Rule&gt;, and other &lt;xccdf:Group&gt; elements.
	Group []GroupType `xml:"Group"`

	// Rule: &lt;xccdf:Rule&gt; elements that comprise the &lt;xccdf:Benchmark&gt;.
	Rule []RuleType `xml:"Rule"`
}

// Status: The acceptance status of an element with an optional date attribute, which signifies the date of the status change. If an element does not have its own &lt;xccdf:status&gt; element, its status is that of its parent element. If there is more than one &lt;xccdf:status&gt; for a single element, then every instance of the &lt;xccdf:status&gt; element must have a @date attribute, and the &lt;xccdf:status&gt; element with the latest date is considered the current status.
type Status struct {
	XMLName xml.Name `xml:"status"`

	// Date: The date the parent element achieved the indicated status.
	Date string `xml:"date,attr,omitempty"`

	Text string `xml:",chardata"`
}

// Model: A suggested scoring model for an &lt;xccdf:Benchmark&gt;, also encapsulating any parameters needed by the model. Every model is designated with a URI, which appears here as the system attribute. See the XCCDF specification for a list of standard scoring models and their associated URIs. Vendors may define their own scoring models and provide additional URIs to designate them. Some models may need additional parameters; to support such a model, zero or more &lt;xccdf:param&gt; elements may appear as children of the &lt;xccdf:model&gt; element.
type Model struct {
	XMLName xml.Name `xml:"model"`

	// System: A URI designating a scoring model.
	System string `xml:"system,attr"`

	// Param: Parameters provided as input to the designated scoring model.
	Param []ParamType `xml:",any"`
}

// Item: An item is a named constituent of an &lt;xccdf:Benchmark&gt;. There are three types of items: &lt;xccdf:Group&gt;, &lt;xccdf:Rule&gt; and &lt;xccdf:Value&gt;. The &lt;xccdf:Item&gt; element type imposes constraints shared by all &lt;xccdf:Group&gt;, &lt;xccdf:Rule&gt; and &lt;xccdf:Value&gt; elements. The itemType is abstract, so the element &lt;xccdf:Item&gt; can never appear in a valid XCCDF document.
type Item struct {
	XMLName xml.Name `xml:"Item"`

	// Abstract: If true, then this item is abstract and exists only to be extended. The use of this attribute for &lt;xccdf:Group&gt; elements is deprecated and should be avoided.
	Abstract bool `xml:"abstract,attr,omitempty"`

	// ClusterId: An identifier to be used as a means to identify (refer to) related items. It designates membership in a cluster of items, which are used for controlling items via &lt;xccdf:Profile&gt; elements. All the items with the same cluster identifier belong to the same cluster. A selector in an &lt;xccdf:Profile&gt; may refer to a cluster, thus making it easier for authors to create and maintain &lt;xccdf:Profile&gt; elements in a complex &lt;xccdf:Benchmark&gt;.
	ClusterId string `xml:"cluster-id,attr,omitempty"`

	// Extends: The identifier of an item on which to base this item. If present, it must have a value equal to the @id attribute of another item. The use of this attribute for &lt;xccdf:Group&gt; elements is deprecated and should be avoided.
	Extends string `xml:"extends,attr,omitempty"`

	// Hidden: If this item should be excluded from any generated documents although it may still be used during assessments.
	Hidden bool `xml:"hidden,attr,omitempty"`

	// ProhibitChanges: If benchmark producers should prohibit changes to this item during tailoring. An author should use this when they do not want to allow end users to change the item.
	ProhibitChanges bool `xml:"prohibitChanges,attr,omitempty"`

	XmlLang string `xml:"lang,attr"`

	XmlBase string `xml:"base,attr"`

	// Id: An identifier used for referencing elements included in an XML signature
	Id string `xml:"Id,attr,omitempty"`

	// Status: Status of the item and date at which it attained that status. &lt;xccdf:Benchmark&gt; authors may use this element to record the maturity or consensus level for elements in the &lt;xccdf:Benchmark&gt;. If an item does not have an explicit &lt;xccdf:status&gt; given, then its status is that of its parent.
	Status []Status `xml:"status"`

	// DcStatus: Holds additional status information using the Dublin Core format.
	DcStatus []DcStatusType `xml:"dc-status"`

	// Version: Version information about this item.
	Version *VersionType `xml:"version"`

	// Title: Title of the item. Every item should have an &lt;xccdf:title&gt;, because this helps people understand the purpose of the item.
	Title []TextWithSubType `xml:"title"`

	// Description: Text that describes the item.
	Description []HtmlTextWithSubType `xml:"description"`

	// Warning: A note or caveat about the item intended to convey important cautionary information for the &lt;xccdf:Benchmark&gt; user (e.g., “Complying with this rule will cause the system to reject all IP packets”). If multiple &lt;xccdf:warning&gt; elements appear, benchmark consumers should concatenate them for generating reports or documents. Benchmark consumers may present this information in a special manner in generated documents.
	Warning []WarningType `xml:"warning"`

	// Question: Interrogative text to present to the user during tailoring. It may also be included into a generated document. For &lt;xccdf:Rule&gt; and &lt;xccdf:Group&gt; elements, the &lt;xccdf:question&gt; text should be a simple binary (yes/no) question because it is supporting the selection aspect of tailoring. For &lt;xccdf:Value&gt; elements, the &lt;xccdf:question&gt; should solicit the user to provide a specific value. Tools may also display constraints on values and any defaults as specified by the other &lt;xccdf:Value&gt; properties.
	Question []TextType `xml:"question"`

	// Reference: References where the user can learn more about the subject of this item.
	Reference []ReferenceType `xml:"reference"`

	// Metadata: XML metadata associated with this item, such as sources, special information, or other details.
	Metadata []MetadataType `xml:"metadata"`
}

// Group: An item that can hold other items. It allows an author to collect related items into a common structure and provide descriptive text and references about them.
type Group struct {
	XMLName xml.Name `xml:"Group"`

	// Id: Unique element identifier; used by other elements to refer to this element.
	Id string `xml:"id,attr"`

	// Selected: If true, this &lt;xccdf:Group&gt;/&lt;xccdf:Rule&gt; is selected to be processed as part of the &lt;xccdf:Benchmark&gt; when it is applied to a target system. An unselected &lt;xccdf:Group&gt; does not get processed, and its contents are not processed either (i.e., all descendants of an unselected &lt;xccdf:Group&gt; are implicitly unselected). An unselected &lt;xccdf:Rule&gt; is not checked and does not contribute to scoring.
	Selected string `xml:"selected,attr,omitempty"`

	// Weight: The relative scoring weight of this &lt;xccdf:Group&gt;/&lt;xccdf:Rule&gt;, for computing a score, expressed as a non-negative real number. It denotes the importance of an &lt;xccdf:Group&gt;/&lt;xccdf:Rule&gt;. Under some scoring models, scoring is computed independently for each collection of sibling &lt;xccdf:Group&gt; and &lt;xccdf:Rule&gt; elements, then normalized as part of the overall scoring process.
	Weight string `xml:"weight,attr,omitempty"`

	// Abstract: If true, then this item is abstract and exists only to be extended. The use of this attribute for &lt;xccdf:Group&gt; elements is deprecated and should be avoided.
	Abstract bool `xml:"abstract,attr,omitempty"`

	// ClusterId: An identifier to be used as a means to identify (refer to) related items. It designates membership in a cluster of items, which are used for controlling items via &lt;xccdf:Profile&gt; elements. All the items with the same cluster identifier belong to the same cluster. A selector in an &lt;xccdf:Profile&gt; may refer to a cluster, thus making it easier for authors to create and maintain &lt;xccdf:Profile&gt; elements in a complex &lt;xccdf:Benchmark&gt;.
	ClusterId string `xml:"cluster-id,attr,omitempty"`

	// Extends: The identifier of an item on which to base this item. If present, it must have a value equal to the @id attribute of another item. The use of this attribute for &lt;xccdf:Group&gt; elements is deprecated and should be avoided.
	Extends string `xml:"extends,attr,omitempty"`

	// Hidden: If this item should be excluded from any generated documents although it may still be used during assessments.
	Hidden bool `xml:"hidden,attr,omitempty"`

	// ProhibitChanges: If benchmark producers should prohibit changes to this item during tailoring. An author should use this when they do not want to allow end users to change the item.
	ProhibitChanges bool `xml:"prohibitChanges,attr,omitempty"`

	XmlLang string `xml:"lang,attr"`

	XmlBase string `xml:"base,attr"`

	// Value: &lt;xccdf:Value&gt; elements that belong to this &lt;xccdf:Group&gt;.
	Value []ValueType `xml:"Value"`

	// Signature: A digital signature asserting authorship and allowing verification of the integrity of the &lt;xccdf:Group&gt;.
	Signature *SignatureType `xml:"signature"`

	// Group: Sub-&lt;xccdf:Groups&gt; under this &lt;xccdf:Group&gt;.
	Group []GroupType `xml:"Group"`

	// Rule: &lt;xccdf:Rule&gt; elements that belong to this &lt;xccdf:Group&gt;.
	Rule []RuleType `xml:"Rule"`

	// Rationale: Descriptive text giving rationale or motivations for abiding by this &lt;xccdf:Group&gt;/&lt;xccdf:Rule&gt; (i.e., why it is important to the security of the target platform).
	Rationale []HtmlTextWithSubType `xml:"rationale"`

	// Platform: Platforms to which this &lt;xccdf:Group&gt;/&lt;xccdf:Rule&gt; applies.
	Platform []OverrideableCpe2IdrefType `xml:"platform"`

	// Requires: The identifiers of other &lt;xccdf:Group&gt; or &lt;xccdf:Rule&gt; elements that must be selected for this &lt;xccdf:Group&gt;/&lt;xccdf:Rule&gt; to be evaluated and scored properly. Each &lt;xccdf:requires&gt; element specifies a list of one or more required items by their identifiers. If at least one of the specified &lt;xccdf:Group&gt; or &lt;xccdf:Rule&gt; elements is selected, the requirement is met.
	Requires []IdrefListType `xml:"requires"`

	// Conflicts: The identifier of another &lt;xccdf:Group&gt; or &lt;xccdf:Rule&gt; that must be unselected for this &lt;xccdf:Group&gt;/&lt;xccdf:Rule&gt; to be evaluated and scored properly. Each &lt;xccdf:conflicts&gt; element specifies a single conflicting item using its idref attribute. If the specified &lt;xccdf:Group&gt; or &lt;xccdf:Rule&gt; element is not selected, the requirement is met.
	Conflicts []IdrefType `xml:"conflicts"`

	// Status: Status of the item and date at which it attained that status. &lt;xccdf:Benchmark&gt; authors may use this element to record the maturity or consensus level for elements in the &lt;xccdf:Benchmark&gt;. If an item does not have an explicit &lt;xccdf:status&gt; given, then its status is that of its parent.
	Status []Status `xml:"status"`

	// DcStatus: Holds additional status information using the Dublin Core format.
	DcStatus []DcStatusType `xml:"dc-status"`

	// Version: Version information about this item.
	Version *VersionType `xml:"version"`

	// Title: Title of the item. Every item should have an &lt;xccdf:title&gt;, because this helps people understand the purpose of the item.
	Title []TextWithSubType `xml:"title"`

	// Description: Text that describes the item.
	Description []HtmlTextWithSubType `xml:"description"`

	// Warning: A note or caveat about the item intended to convey important cautionary information for the &lt;xccdf:Benchmark&gt; user (e.g., “Complying with this rule will cause the system to reject all IP packets”). If multiple &lt;xccdf:warning&gt; elements appear, benchmark consumers should concatenate them for generating reports or documents. Benchmark consumers may present this information in a special manner in generated documents.
	Warning []WarningType `xml:"warning"`

	// Question: Interrogative text to present to the user during tailoring. It may also be included into a generated document. For &lt;xccdf:Rule&gt; and &lt;xccdf:Group&gt; elements, the &lt;xccdf:question&gt; text should be a simple binary (yes/no) question because it is supporting the selection aspect of tailoring. For &lt;xccdf:Value&gt; elements, the &lt;xccdf:question&gt; should solicit the user to provide a specific value. Tools may also display constraints on values and any defaults as specified by the other &lt;xccdf:Value&gt; properties.
	Question []TextType `xml:"question"`

	// Reference: References where the user can learn more about the subject of this item.
	Reference []ReferenceType `xml:"reference"`

	// Metadata: XML metadata associated with this item, such as sources, special information, or other details.
	Metadata []MetadataType `xml:"metadata"`
}

// Rule: The &lt;xccdf:Rule&gt; element contains the description for a single item of guidance or constraint. &lt;xccdf:Rule&gt; elements form the basis for testing a target platform for compliance with an &lt;xccdf:Benchmark&gt;, for scoring, and for conveying descriptive prose, identifiers, references, and remediation information.
type Rule struct {
	XMLName xml.Name `xml:"Rule"`

	// Id: Unique element identifier used by other elements to refer to this element.
	Id string `xml:"id,attr"`

	// Role: The &lt;xccdf:Rule&gt; element’s role in scoring and reporting.
	Role string `xml:"role,attr,omitempty"`

	// Severity: Severity level code to be used for metrics and tracking.
	Severity string `xml:"severity,attr,omitempty"`

	// Multiple: Applicable in cases where there are multiple instances of a target. For example, an &lt;xccdf:Rule&gt; may provide a recommendation about the configuration of application user accounts, but an application may have many user accounts. Each account would be considered an instance of the broader assessment target of user accounts. If the @multiple attribute is set to true, each instance of the target to which the &lt;xccdf:Rule&gt; can apply should be tested separately and the results should be recorded separately. If @multiple is set to false, the test results of such instances should be combined. If the checking system does not combine these results automatically, the results of each instance should be ANDed together to produce a single result. If the benchmark consumer cannot perform multiple instantiation, or if multiple instantiation of the &lt;xccdf:Rule&gt; is not applicable for the target system, then the benchmark consumer may ignore this attribute.
	Multiple string `xml:"multiple,attr,omitempty"`

	// Selected: If true, this &lt;xccdf:Group&gt;/&lt;xccdf:Rule&gt; is selected to be processed as part of the &lt;xccdf:Benchmark&gt; when it is applied to a target system. An unselected &lt;xccdf:Group&gt; does not get processed, and its contents are not processed either (i.e., all descendants of an unselected &lt;xccdf:Group&gt; are implicitly unselected). An unselected &lt;xccdf:Rule&gt; is not checked and does not contribute to scoring.
	Selected string `xml:"selected,attr,omitempty"`

	// Weight: The relative scoring weight of this &lt;xccdf:Group&gt;/&lt;xccdf:Rule&gt;, for computing a score, expressed as a non-negative real number. It denotes the importance of an &lt;xccdf:Group&gt;/&lt;xccdf:Rule&gt;. Under some scoring models, scoring is computed independently for each collection of sibling &lt;xccdf:Group&gt; and &lt;xccdf:Rule&gt; elements, then normalized as part of the overall scoring process.
	Weight string `xml:"weight,attr,omitempty"`

	// Abstract: If true, then this item is abstract and exists only to be extended. The use of this attribute for &lt;xccdf:Group&gt; elements is deprecated and should be avoided.
	Abstract bool `xml:"abstract,attr,omitempty"`

	// ClusterId: An identifier to be used as a means to identify (refer to) related items. It designates membership in a cluster of items, which are used for controlling items via &lt;xccdf:Profile&gt; elements. All the items with the same cluster identifier belong to the same cluster. A selector in an &lt;xccdf:Profile&gt; may refer to a cluster, thus making it easier for authors to create and maintain &lt;xccdf:Profile&gt; elements in a complex &lt;xccdf:Benchmark&gt;.
	ClusterId string `xml:"cluster-id,attr,omitempty"`

	// Extends: The identifier of an item on which to base this item. If present, it must have a value equal to the @id attribute of another item. The use of this attribute for &lt;xccdf:Group&gt; elements is deprecated and should be avoided.
	Extends string `xml:"extends,attr,omitempty"`

	// Hidden: If this item should be excluded from any generated documents although it may still be used during assessments.
	Hidden bool `xml:"hidden,attr,omitempty"`

	// ProhibitChanges: If benchmark producers should prohibit changes to this item during tailoring. An author should use this when they do not want to allow end users to change the item.
	ProhibitChanges bool `xml:"prohibitChanges,attr,omitempty"`

	XmlLang string `xml:"lang,attr"`

	XmlBase string `xml:"base,attr"`

	// Ident: A globally meaningful identifier for this &lt;xccdf:Rule&gt;. This may be the name or identifier of a security configuration issue or vulnerability that the &lt;xccdf:Rule&gt; assesses.
	Ident []IdentType `xml:"ident"`

	// ImpactMetric: The potential impact of failure to conform to the &lt;xccdf:Rule&gt;, expressed as a CVSS 2.0 base vector.
	ImpactMetric string `xml:"impact-metric"`

	// ProfileNote: Text that describes special aspects of the &lt;xccdf:Rule&gt; related to one or more &lt;xccdf:Profile&gt; elements. This allows an author to document things within &lt;xccdf:Rule&gt; elements that are specific to a given &lt;xccdf:Profile&gt;, and then select the appropriate text based on the selected &lt;xccdf:Profile&gt; and display it to the reader.
	ProfileNote []ProfileNoteType `xml:"profile-note"`

	// Fixtext: Data that describes how to bring a target system into compliance with this &lt;xccdf:Rule&gt;.
	Fixtext []FixTextType `xml:"fixtext"`

	// Fix: A command string, script, or other system modification statement that, if executed on the target system, can bring it into full, or at least better, compliance with this &lt;xccdf:Rule&gt;.
	Fix []FixType `xml:"fix"`

	// Signature: A digital signature asserting authorship and allowing verification of the integrity of the &lt;xccdf:Rule&gt;.
	Signature *SignatureType `xml:"signature"`

	// Check: The definition of, or a reference to, the target system check needed to test compliance with this &lt;xccdf:Rule&gt;. Sibling &lt;xccdf:check&gt; elements must have different values for the combination of their @selector and @system attributes, and must have different values for their @id attribute (if any).
	Check []CheckType `xml:"check"`

	// ComplexCheck: A boolean expression composed of operators (and, or, not) and individual checks.
	ComplexCheck *ComplexCheckType `xml:"complex-check"`

	// Rationale: Descriptive text giving rationale or motivations for abiding by this &lt;xccdf:Group&gt;/&lt;xccdf:Rule&gt; (i.e., why it is important to the security of the target platform).
	Rationale []HtmlTextWithSubType `xml:"rationale"`

	// Platform: Platforms to which this &lt;xccdf:Group&gt;/&lt;xccdf:Rule&gt; applies.
	Platform []OverrideableCpe2IdrefType `xml:"platform"`

	// Requires: The identifiers of other &lt;xccdf:Group&gt; or &lt;xccdf:Rule&gt; elements that must be selected for this &lt;xccdf:Group&gt;/&lt;xccdf:Rule&gt; to be evaluated and scored properly. Each &lt;xccdf:requires&gt; element specifies a list of one or more required items by their identifiers. If at least one of the specified &lt;xccdf:Group&gt; or &lt;xccdf:Rule&gt; elements is selected, the requirement is met.
	Requires []IdrefListType `xml:"requires"`

	// Conflicts: The identifier of another &lt;xccdf:Group&gt; or &lt;xccdf:Rule&gt; that must be unselected for this &lt;xccdf:Group&gt;/&lt;xccdf:Rule&gt; to be evaluated and scored properly. Each &lt;xccdf:conflicts&gt; element specifies a single conflicting item using its idref attribute. If the specified &lt;xccdf:Group&gt; or &lt;xccdf:Rule&gt; element is not selected, the requirement is met.
	Conflicts []IdrefType `xml:"conflicts"`

	// Status: Status of the item and date at which it attained that status. &lt;xccdf:Benchmark&gt; authors may use this element to record the maturity or consensus level for elements in the &lt;xccdf:Benchmark&gt;. If an item does not have an explicit &lt;xccdf:status&gt; given, then its status is that of its parent.
	Status []Status `xml:"status"`

	// DcStatus: Holds additional status information using the Dublin Core format.
	DcStatus []DcStatusType `xml:"dc-status"`

	// Version: Version information about this item.
	Version *VersionType `xml:"version"`

	// Title: Title of the item. Every item should have an &lt;xccdf:title&gt;, because this helps people understand the purpose of the item.
	Title []TextWithSubType `xml:"title"`

	// Description: Text that describes the item.
	Description []HtmlTextWithSubType `xml:"description"`

	// Warning: A note or caveat about the item intended to convey important cautionary information for the &lt;xccdf:Benchmark&gt; user (e.g., “Complying with this rule will cause the system to reject all IP packets”). If multiple &lt;xccdf:warning&gt; elements appear, benchmark consumers should concatenate them for generating reports or documents. Benchmark consumers may present this information in a special manner in generated documents.
	Warning []WarningType `xml:"warning"`

	// Question: Interrogative text to present to the user during tailoring. It may also be included into a generated document. For &lt;xccdf:Rule&gt; and &lt;xccdf:Group&gt; elements, the &lt;xccdf:question&gt; text should be a simple binary (yes/no) question because it is supporting the selection aspect of tailoring. For &lt;xccdf:Value&gt; elements, the &lt;xccdf:question&gt; should solicit the user to provide a specific value. Tools may also display constraints on values and any defaults as specified by the other &lt;xccdf:Value&gt; properties.
	Question []TextType `xml:"question"`

	// Reference: References where the user can learn more about the subject of this item.
	Reference []ReferenceType `xml:"reference"`

	// Metadata: XML metadata associated with this item, such as sources, special information, or other details.
	Metadata []MetadataType `xml:"metadata"`
}

// Value: The &lt;xccdf:Value&gt; element is a named parameter that can be substituted into properties of other elements within the &lt;xccdf:Benchmark&gt;, including the interior of structured check specifications and fix scripts.
type Value struct {
	XMLName xml.Name `xml:"Value"`

	// Id: The unique identifier for this element.
	Id string `xml:"id,attr"`

	// Type: The data type of the &lt;xccdf:Value&gt;. A tool may choose any convenient form to store an &lt;xccdf:Value&gt; element’s &lt;xccdf:value&gt; element, but the @type attribute conveys how the &lt;xccdf:Value&gt; should be treated for user input validation purposes during tailoring processing. The @type attribute may also be used to give additional guidance to the user or to validate the user’s input. In the case of a list of values, the @type attribute, if present, applies to all elements of the list individually.
	Type string `xml:"type,attr,omitempty"`

	// Operator: The operator to be used for comparing this &lt;xccdf:Value&gt; to some part of the test system’s configuration during &lt;xccdf:Rule&gt; checking.
	Operator string `xml:"operator,attr,omitempty"`

	// Interactive: Whether tailoring for this &lt;xccdf:Value&gt; should be performed during &lt;xccdf:Benchmark&gt; application. The benchmark consumer may ignore the attribute if asking the user is not feasible or not supported.
	Interactive string `xml:"interactive,attr,omitempty"`

	// InterfaceHint: A hint or recommendation to a benchmark consumer or producer about how the user might select or adjust the &lt;xccdf:Value&gt;.
	InterfaceHint string `xml:"interfaceHint,attr,omitempty"`

	// Abstract: If true, then this item is abstract and exists only to be extended. The use of this attribute for &lt;xccdf:Group&gt; elements is deprecated and should be avoided.
	Abstract bool `xml:"abstract,attr,omitempty"`

	// ClusterId: An identifier to be used as a means to identify (refer to) related items. It designates membership in a cluster of items, which are used for controlling items via &lt;xccdf:Profile&gt; elements. All the items with the same cluster identifier belong to the same cluster. A selector in an &lt;xccdf:Profile&gt; may refer to a cluster, thus making it easier for authors to create and maintain &lt;xccdf:Profile&gt; elements in a complex &lt;xccdf:Benchmark&gt;.
	ClusterId string `xml:"cluster-id,attr,omitempty"`

	// Extends: The identifier of an item on which to base this item. If present, it must have a value equal to the @id attribute of another item. The use of this attribute for &lt;xccdf:Group&gt; elements is deprecated and should be avoided.
	Extends string `xml:"extends,attr,omitempty"`

	// Hidden: If this item should be excluded from any generated documents although it may still be used during assessments.
	Hidden bool `xml:"hidden,attr,omitempty"`

	// ProhibitChanges: If benchmark producers should prohibit changes to this item during tailoring. An author should use this when they do not want to allow end users to change the item.
	ProhibitChanges bool `xml:"prohibitChanges,attr,omitempty"`

	XmlLang string `xml:"lang,attr"`

	XmlBase string `xml:"base,attr"`

	// Match: A Perl Compatible Regular Expression that a benchmark producer may apply during tailoring to validate a user’s input for the &lt;xccdf:Value&gt;. It uses implicit anchoring. It applies only when the @type property is “string” or “number” or a list of strings and/or numbers.
	Match []SelStringType `xml:"match"`

	// LowerBound: Minimum legal value for this &lt;xccdf:Value&gt;. It is used to constrain value input during tailoring, when the @type property is “number”. Values supplied by the user for tailoring the &lt;xccdf:Benchmark&gt; must be equal to or greater than this number.
	LowerBound []SelNumType `xml:"lower-bound"`

	// UpperBound: Maximum legal value for this &lt;xccdf:Value&gt;. It is used to constrain value input during tailoring, when the @type is “number”. Values supplied by the user for tailoring the &lt;xccdf:Benchmark&gt; must be less than or equal to than this number.
	UpperBound []SelNumType `xml:"upper-bound"`

	// Choices: A list of legal or suggested choices (values) for an &lt;xccdf:Value&gt; element, to be used during tailoring and document generation.
	Choices []SelChoicesType `xml:"choices"`

	// Source: URI indicating where the tool may acquire values, value bounds, or value choices for this &lt;xccdf:Value&gt; element. XCCDF does not attach any meaning to the URI; it may be an arbitrary community or tool-specific value, or a pointer directly to a resource. If several instances of the &lt;xccdf:source&gt; property appear, then they represent alternative means or locations for obtaining the value in descending order of preference (i.e., most preferred first).
	Source []UriRefType `xml:"source"`

	// Signature: A digital signature asserting authorship and allowing verification of the integrity of the &lt;xccdf:Value&gt;.
	Signature *SignatureType `xml:"signature"`

	// Value: A simple (number, string, or boolean) value associated with this &lt;xccdf:Value&gt;. At any time an &lt;xccdf:Value&gt; has one active (simple or complex) value. If a selector value has been provided under &lt;xccdf:Profile&gt; selection or tailoring then the active &lt;xccdf:value&gt;/&lt;xccdf:complex-value&gt; is the one with a matching @selector. If there is no provided selector or if the provided selector does not match the @selector attribute of any &lt;xccdf:value&gt; or &lt;xccdf:complex-value&gt;, the active &lt;xccdf:value&gt;/&lt;xccdf:complex-value&gt; is the one with an empty or absent @selector or, failing that, the first &lt;xccdf:value&gt; or &lt;xccdf:complex-value&gt; in the XML. When an &lt;xccdf:Value&gt; is exported or used in text substitution, it is the currently active &lt;xccdf:value&gt; or &lt;xccdf:complex-value&gt; that is actually used. If there are multiple &lt;xccdf:value&gt; and/or &lt;xccdf:complex-value&gt; elements, only one may omit a @selector attribute and no two may have the same @selector value.
	Value []SelStringType `xml:"value"`

	// ComplexValue: A complex (list) value associated with this &lt;xccdf:Value&gt;. See the description of the &lt;xccdf:value&gt; property for &lt;xccdf:Rule&gt; elements regarding activation of an &lt;xccdf:complex-value&gt;.
	ComplexValue []SelComplexValueType `xml:"complex-value"`

	// Default: The default value displayed to the user as a suggestion by benchmark producers during tailoring of this &lt;xccdf:Value&gt; element. (This is not the default value of an &lt;xccdf:Value&gt;; it is just the default display.) If there are multiple &lt;xccdf:default&gt; and/or &lt;xccdf:complex-default&gt; elements, only one may omit a @selector attribute and no two may have the same @selector value.
	Default []SelStringType `xml:"default"`

	// ComplexDefault: The default &lt;xccdf:complex-value&gt; displayed to the user as a suggestion by benchmark producers during tailoring of this &lt;xccdf:Value&gt; element. (This is not the default value of an &lt;xccdf:Value&gt;; it is just the default display.) If there are multiple &lt;xccdf:default&gt; and &lt;xccdf:complex-default&gt; elements, only one may omit a @selector attribute and no two may have the same @selector value.
	ComplexDefault []SelComplexValueType `xml:"complex-default"`

	// Status: Status of the item and date at which it attained that status. &lt;xccdf:Benchmark&gt; authors may use this element to record the maturity or consensus level for elements in the &lt;xccdf:Benchmark&gt;. If an item does not have an explicit &lt;xccdf:status&gt; given, then its status is that of its parent.
	Status []Status `xml:"status"`

	// DcStatus: Holds additional status information using the Dublin Core format.
	DcStatus []DcStatusType `xml:"dc-status"`

	// Version: Version information about this item.
	Version *VersionType `xml:"version"`

	// Title: Title of the item. Every item should have an &lt;xccdf:title&gt;, because this helps people understand the purpose of the item.
	Title []TextWithSubType `xml:"title"`

	// Description: Text that describes the item.
	Description []HtmlTextWithSubType `xml:"description"`

	// Warning: A note or caveat about the item intended to convey important cautionary information for the &lt;xccdf:Benchmark&gt; user (e.g., “Complying with this rule will cause the system to reject all IP packets”). If multiple &lt;xccdf:warning&gt; elements appear, benchmark consumers should concatenate them for generating reports or documents. Benchmark consumers may present this information in a special manner in generated documents.
	Warning []WarningType `xml:"warning"`

	// Question: Interrogative text to present to the user during tailoring. It may also be included into a generated document. For &lt;xccdf:Rule&gt; and &lt;xccdf:Group&gt; elements, the &lt;xccdf:question&gt; text should be a simple binary (yes/no) question because it is supporting the selection aspect of tailoring. For &lt;xccdf:Value&gt; elements, the &lt;xccdf:question&gt; should solicit the user to provide a specific value. Tools may also display constraints on values and any defaults as specified by the other &lt;xccdf:Value&gt; properties.
	Question []TextType `xml:"question"`

	// Reference: References where the user can learn more about the subject of this item.
	Reference []ReferenceType `xml:"reference"`

	// Metadata: XML metadata associated with this item, such as sources, special information, or other details.
	Metadata []MetadataType `xml:"metadata"`
}

// Profile: The &lt;xccdf:Profile&gt; element is a named tailoring for an &lt;xccdf:Benchmark&gt;. While an &lt;xccdf:Benchmark&gt; can be tailored in place by setting properties of various elements, &lt;xccdf:Profile&gt; elements allow one &lt;xccdf:Benchmark&gt; document to hold several independent tailorings.
type Profile struct {
	XMLName xml.Name `xml:"Profile"`

	// Id: Unique identifier for this &lt;xccdf:Profile&gt;.
	Id ProfileIdType `xml:"id,attr"`

	// ProhibitChanges: Whether or not products should prohibit changes to this &lt;xccdf:Profile&gt;.
	ProhibitChanges bool `xml:"prohibitChanges,attr,omitempty"`

	// Abstract: If true, then this &lt;xccdf:Profile&gt; exists solely to be extended by other &lt;xccdf:Profile&gt; elements.
	Abstract bool `xml:"abstract,attr,omitempty"`

	// NoteTag: Tag identifier to specify which &lt;xccdf:profile-note&gt; element from an &lt;xccdf:Rule&gt; should be associated with this &lt;xccdf:Profile&gt;.
	NoteTag string `xml:"note-tag,attr,omitempty"`

	// Extends: The id of an &lt;xccdf:Profile&gt; on which to base this &lt;xccdf:Profile&gt;.
	Extends string `xml:"extends,attr,omitempty"`

	XmlBase string `xml:"base,attr"`

	// Id2: An identifier used for referencing elements included in an XML signature.
	Id2 string `xml:"Id,attr,omitempty"`

	// Status: Status of the &lt;xccdf:Profile&gt; and date at which it attained that status. Authors may use this element to record the maturity or consensus level of an &lt;xccdf:Profile&gt;. If the &lt;xccdf:status&gt; is not given explicitly, then the &lt;xccdf:Profile&gt; is taken to have the same status as its parent &lt;xccdf:Benchmark&gt;.
	Status []Status `xml:"status"`

	// DcStatus: Holds additional status information using the Dublin Core format.
	DcStatus []DcStatusType `xml:"dc-status"`

	// Version: Version information about this &lt;xccdf:Profile&gt;.
	Version *VersionType `xml:"version"`

	// Title: Title of the &lt;xccdf:Profile&gt;.
	Title []TextWithSubType `xml:"title"`

	// Description: Text that describes the &lt;xccdf:Profile&gt;.
	Description []HtmlTextWithSubType `xml:"description"`

	// Reference: A reference where the user can learn more about the subject of this &lt;xccdf:Profile&gt;.
	Reference []ReferenceType `xml:"reference"`

	// Platform: A target platform for this &lt;xccdf:Profile&gt;.
	Platform []OverrideableCpe2IdrefType `xml:"platform"`

	// Metadata: Metadata associated with this &lt;xccdf:Profile&gt;.
	Metadata []MetadataType `xml:"metadata"`

	// Signature: A digital signature asserting authorship and allowing verification of the integrity of the &lt;xccdf:Profile&gt;.
	Signature *SignatureType `xml:"signature"`

	// Select: Select or deselect &lt;xccdf:Group&gt; and &lt;xccdf:Rule&gt; elements.
	Select []ProfileSelectType `xml:"select"`

	// SetComplexValue: Set the value of an &lt;xccdf:Value&gt; to a list.
	SetComplexValue []ProfileSetComplexValueType `xml:"set-complex-value"`

	// SetValue: Set the value of an &lt;xccdf:Value&gt; to a simple data value.
	SetValue []ProfileSetValueType `xml:"set-value"`

	// RefineValue: Customize the properties of an &lt;xccdf:Value&gt;.
	RefineValue []ProfileRefineValueType `xml:"refine-value"`

	// RefineRule: Customize the properties of an &lt;xccdf:Rule&gt; or &lt;xccdf:Group&gt;.
	RefineRule []ProfileRefineRuleType `xml:"refine-rule"`
}

// TestResult: The &lt;xccdf:TestResult&gt; element encapsulates the results of a single application of an &lt;xccdf:Benchmark&gt; to a single target platform. The &lt;xccdf:TestResult&gt; element normally appears as the child of the &lt;xccdf:Benchmark&gt; element, although it may also appear as the top-level element of an XCCDF results document. XCCDF is not intended to be a database format for detailed results; the &lt;xccdf:TestResult&gt; element offers a way to store the results of individual tests in modest detail, with the ability to reference lower-level testing data.
type TestResult struct {
	XMLName xml.Name `xml:"TestResult"`

	// Id: Unique identifier for this element.
	Id TestresultIdType `xml:"id,attr"`

	// StartTime: Time when testing began.
	StartTime string `xml:"start-time,attr,omitempty"`

	// EndTime: Time when testing was completed and the results recorded.
	EndTime string `xml:"end-time,attr"`

	// TestSystem: Name of the benchmark consumer program that generated this &lt;xccdf:TestResult&gt; element; should be either a CPE name or a CPE applicability language expression.
	TestSystem string `xml:"test-system,attr,omitempty"`

	// Version: The version number string copied from the &lt;xccdf:Benchmark&gt; used to direct this assessment.
	Version string `xml:"version,attr,omitempty"`

	// Id2: An identifier used for referencing elements included in an XML signature.
	Id2 string `xml:"Id,attr,omitempty"`

	// Benchmark: Reference to the &lt;xccdf:Benchmark&gt; for which the &lt;xccdf:TestResult&gt; records results. This property is required if this &lt;xccdf:TestResult&gt; element is the top-level element and optional otherwise.
	Benchmark *BenchmarkReferenceType `xml:"benchmark"`

	// TailoringFile: The tailoring file element contains attributes used to identify an &lt;xccdf:Tailoring&gt; element used to guide the assessment reported on in this &lt;xccdf:TestResult&gt;. The tailoring element is required in an &lt;xccdf:TestResult&gt; if and only if an &lt;xccdf:Tailoring&gt; element guided the assessment recorded in the &lt;xccdf:TestResult&gt; or if the &lt;xccdf:Tailoring&gt; element records manual tailoring actions applied to this assessment.
	TailoringFile *TailoringReferenceType `xml:"tailoring-file"`

	// Title: Title of the test.
	Title []TextType `xml:"title"`

	// Remark: A remark about the test, possibly supplied by the person administering the &lt;xccdf:Benchmark&gt; assessment
	Remark []TextType `xml:"remark"`

	// Organization: The name of the organization or other entity responsible for applying this &lt;xccdf:Benchmark&gt; and generating this result. When multiple &lt;xccdf:organization&gt; elements are used to indicate multiple organization names in a hierarchical organization, the highest-level organization should appear first.
	Organization []string `xml:"organization"`

	// Identity: Information about the system identity or user employed during application of the &lt;xccdf:Benchmark&gt;. If used, specifies the name of the authenticated identity.
	Identity *IdentityType `xml:"identity"`

	// Profile: The &lt;xccdf:profile&gt; element holds the value of the @id attribute value of the &lt;xccdf:Profile&gt; selected to be used in the assessment reported on by this &lt;xccdf:TestResult&gt;. This &lt;xccdf:Profile&gt; might be from the &lt;xccdf:Benchmark&gt; or from an &lt;xccdf:Tailoring&gt; file, if used. This element should appear if and only if an &lt;xccdf:Profile&gt; was selected to guide the assessment.
	Profile *IdrefType `xml:"profile"`

	// Target: Name or description of the target system whose test results are recorded in the &lt;xccdf:TestResult&gt; element (the system to which an &lt;xccdf:Benchmark&gt; test was applied). Each appearance of the element supplies a name by which the target host or device was identified at the time the test was run. The name may be any string, but applications should include the fully qualified DNS name whenever possible.
	Target []string `xml:"target"`

	// TargetAddress: Network address of the target system to which an &lt;xccdf:Benchmark&gt; test was applied. Typical forms for the address include IP version 4 (IPv4), IP version 6 (IPv6), and Ethernet media access control (MAC).
	TargetAddress []string `xml:"target-address"`

	// TargetFacts: A list of named facts about the target system or platform.
	TargetFacts *TargetFactsType `xml:"target-facts"`

	// Platform: A platform on the target system. There should be one instance of this property for every platform that the target system was found to meet.
	Platform []Cpe2IdrefType `xml:"platform"`

	// RuleResult: The result of a single instance of an &lt;xccdf:Rule&gt; application against the target. The &lt;xccdf:TestResult&gt; must include at least one &lt;xccdf:rule-result&gt; record for each &lt;xccdf:Rule&gt; that was selected in the resolved &lt;xccdf:Benchmark&gt;.
	RuleResult []RuleResultType `xml:"rule-result"`

	// Score: An overall score for this &lt;xccdf:Benchmark&gt; test.
	Score []ScoreType `xml:"score"`

	// Metadata: XML metadata associated with this &lt;xccdf:TestResult&gt;.
	Metadata []MetadataType `xml:"metadata"`

	// Signature: A digital signature asserting authorship and allowing verification of the integrity of the &lt;xccdf:TestResult&gt;.
	Signature *SignatureType `xml:"signature"`

	// TargetIdRef: References to external structures with identifying information about the target of this assessment.
	TargetIdRef []TargetIdRefType `xml:"target-id-ref"`

	// SetValue: Specific setting for a single &lt;xccdf:Value&gt; element used during the test.
	SetValue []ProfileSetValueType `xml:"set-value"`

	// SetComplexValue: Specific setting for a single &lt;xccdf:Value&gt; element used during the test when the given value is set to a complex type, such as a list.
	SetComplexValue []ProfileSetComplexValueType `xml:"set-complex-value"`
}

// Tailoring: The &lt;xccdf:Tailoring&gt; element holds one or more &lt;xccdf:Profile&gt; elements. These &lt;xccdf:Profile&gt; elements record additional tailoring activities that apply to a given &lt;xccdf:Benchmark&gt;. &lt;xccdf:Tailoring&gt; elements are separate from &lt;xccdf:Benchmark&gt; documents, but each &lt;xccdf:Tailoring&gt; element is associated with a specific &lt;xccdf:Benchmark&gt; document. By defining these tailoring actions separately from the &lt;xccdf:Benchmark&gt; document to which they apply, these actions can be recorded without affecting the integrity of the source itself.
type Tailoring struct {
	XMLName xml.Name `xml:"Tailoring"`

	// Id: Unique identifier for this element.
	Id TailoringIdType `xml:"id,attr"`

	// Id2: An identifier used for referencing elements included in an XML signature.
	Id2 string `xml:"Id,attr,omitempty"`

	// Benchmark: Identifies the &lt;xccdf:Benchmark&gt; to which this tailoring applies. A &lt;xccdf:Tailoring&gt; document is only applicable to a single &lt;xccdf:Benchmark&gt;. Note, however, that this is a purely informative field.
	Benchmark *TailoringBenchmarkReferenceType `xml:"benchmark"`

	// Status: Status of the tailoring and date at which it attained that status. Authors may use this element to record the maturity or consensus level of an &lt;xccdf:Tailoring&gt; element.
	Status []Status `xml:"status"`

	// DcStatus: Holds additional status information using the Dublin Core format.
	DcStatus []DcStatusType `xml:"dc-status"`

	// Version: The version of this &lt;xccdf:Tailoring&gt; element, with a required @time attribute that records when the &lt;xccdf:Tailoring&gt; element was created. This timestamp is necessary because, under some circumstances, a copy of an &lt;xccdf:Tailoring&gt; document might be automatically generated. Without the version and timestamp, tracking of these automatically created &lt;xccdf:Tailoring&gt; documents could become problematic.
	Version TailoringVersionType `xml:"version"`

	// Metadata: XML metadata for the &lt;xccdf:Tailoring&gt; element.
	Metadata []MetadataType `xml:"metadata"`

	// Profile: &lt;xccdf:Profile&gt; elements that reference and customize sets of items in an &lt;xccdf:Benchmark&gt;.
	Profile []ProfileType `xml:"Profile"`

	// Signature: A digital signature asserting authorship and allowing verification of the integrity of the &lt;xccdf:Tailoring&gt;.
	Signature *SignatureType `xml:"signature"`
}

// XSD ComplexType declarations

// NoticeType: Data type for an &lt;xccdf:notice&gt; element. &lt;xccdf:notice&gt; elements are used to include legal notices (licensing information, terms of use, etc.), copyright statements, warnings, and other advisory notices about this &lt;xccdf:Benchmark&gt; and its use. This information may be expressed using XHTML or may be a simply text expression. Each &lt;xccdf:notice&gt; element must have a unique identifier.
type NoticeType struct {
	XMLName xml.Name

	// Id: The unique identifier for this &lt;xccdf:notice&gt;.
	Id string `xml:"id,attr"`

	XmlBase string `xml:"base,attr"`

	XmlLang string `xml:"lang,attr"`

	InnerXml string `xml:",innerxml"`
}

// DcStatusType: Data type element for the &lt;xccdf:dc-status&gt; element, which holds status information about its parent element using the Dublin Core format, expressed as elements of the DCMI Simple DC Element specification.
type DcStatusType struct {
	XMLName xml.Name
}

// PlainTextType: The data type for an &lt;xccdf:plain-text&gt; element, which is a reusable text block for reference by the &lt;xccdf:sub&gt; element. This allows text to be defined once and then reused multiple times. Each &lt;xccdf:plain-text&gt; element mush have a unique id.
type PlainTextType struct {
	XMLName xml.Name

	// Id: The unique identifier for this &lt;xccdf:plain-text&gt; element.
	Id string `xml:"id,attr"`

	Text string `xml:",chardata"`
}

// ReferenceType: This element provides supplementary descriptive text for a XCCDF elements. When used, it has either a simple string value or a value consisting of simple Dublin Core elements. If a bare string appears, then it is taken to be the string content for a Dublin Core title element. Multiple &lt;xccdf:reference&gt; elements may appear; a document generation processing tool may concatenate them, or put them into a reference list, and may choose to number them.
type ReferenceType struct {
	XMLName xml.Name

	// Href: A URL pointing to the referenced resource.
	Href string `xml:"href,attr"`

	// Override: Used to manage inheritance processing.
	Override bool `xml:"override,attr"`

	InnerXml string `xml:",innerxml"`
}

// SignatureType: The type of an &lt;XMLDSig:signature&gt; element, which holds an enveloped digital signature asserting authorship and allowing verification of the integrity of associated data (e.g., its parent element, other documents, portions of other documents).
type SignatureType struct {
	XMLName xml.Name
}

// MetadataType: Data type that supports inclusion of metadata about a document or element. This is particularly useful for facilitating the discovery and retrieval of XCCDF checklists from public repositories. When used, the contents of the &lt;xccdf:metadata&gt; element are expressed in XML. The &lt;xccdf:Benchmark&gt; element's metadata should contain information formatted using the Dublin Core Metadata Initiative (DCMI) Simple DC Element specification, as described in [DCES] and [DCXML]. Benchmark consumers should be prepared to process Dublin Core metadata in the &lt;xccdf:metadata&gt; element. Other metadata schemes, including ad-hoc elements, are also allowed, both in the &lt;xccdf:Benchmark&gt; and in other elements.
type MetadataType struct {
	XMLName xml.Name
}

// ParamType: Type for a parameter used in the &lt;xccdf:model&gt; element, which records scoring model information. The contents of this type represent a name-value pair, where the name is recorded in the @name attribute and the value appears in the element body. &lt;xccdf:param&gt; elements with equal values for the @name attribute may not appear as children of the same &lt;xccdf:model&gt; element.
type ParamType struct {
	XMLName xml.Name

	// Name: The name associated with the contained value.
	Name string `xml:"name,attr"`

	Text string `xml:",chardata"`
}

// VersionType: Type for most &lt;xccdf:version&gt; elements.
type VersionType struct {
	XMLName xml.Name

	// Time: The time that this version of the associated element was completed.
	Time string `xml:"time,attr,omitempty"`

	// Update: A URI indicating a location where updates to the associated element may be obtained.
	Update string `xml:"update,attr,omitempty"`

	Text string `xml:",chardata"`
}

// TextType: Type for a simple text string with an @override attribute for controlling inheritance.
type TextType struct {
	XMLName xml.Name

	XmlLang string `xml:"lang,attr"`

	// Override: Used to manage inheritance.
	Override bool `xml:"override,attr,omitempty"`

	Text string `xml:",chardata"`
}

// HtmlTextType: The type for a string with optional XHTML elements and an @xml:lang attribute.
type HtmlTextType struct {
	XMLName xml.Name

	XmlLang string `xml:"lang,attr"`

	// Override: Used to manage inheritance.
	Override bool `xml:"override,attr,omitempty"`

	InnerXml string `xml:",innerxml"`
}

// HtmlTextWithSubType: The type for a string with optional XHTML elements, and an @xml:lang attribute.
type HtmlTextWithSubType struct {
	XMLName xml.Name

	XmlLang string `xml:"lang,attr"`

	// Override: Used to manage inheritance.
	Override bool `xml:"override,attr,omitempty"`

	// Sub: Specifies an &lt;xccdf:Value&gt; or &lt;xccdf:plain-text&gt; element to be used for text substitution
	Sub []SubType `xml:"sub"`

	InnerXml string `xml:",innerxml"`
}

// ProfileNoteType: Type for an &lt;xccdf:profile-note&gt; within an &lt;xccdf:Rule&gt;. This element contains text that describes special aspects of an &lt;xccdf:Rule&gt; relative to one or more &lt;xccdf:Profile&gt; elements. This allows an author to document things within &lt;xccdf:Rule&gt; elements that are specific to a given &lt;xccdf:Profile&gt;. This information might then be displayed to a reader based on the selection of a particular &lt;xccdf:Profile&gt;. The body text may include XHTML mark-up as well as &lt;xccdf:sub&gt; elements.
type ProfileNoteType struct {
	XMLName xml.Name

	XmlLang string `xml:"lang,attr"`

	// Tag: The identifier of this note.
	Tag string `xml:"tag,attr"`

	// Sub: Specifies an &lt;xccdf:Value&gt; or &lt;xccdf:plain-text&gt; element to be used for text substitution
	Sub []SubType `xml:"sub"`

	InnerXml string `xml:",innerxml"`
}

// TextWithSubType: Type for a string with embedded &lt;xccdf:Value&gt; substitutions and an @override attribute to help manage inheritance.
type TextWithSubType struct {
	XMLName xml.Name

	XmlLang string `xml:"lang,attr"`

	// Override: Used to manage inheritance.
	Override bool `xml:"override,attr,omitempty"`

	// Sub: Specifies an &lt;xccdf:Value&gt; or &lt;xccdf:plain-text&gt; element to be used for text substitution.
	Sub []SubType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

// SubType: The type used for &lt;xccdf:sub&gt; elements. The &lt;xccdf:sub&gt; element identifies replacement content that should appear in place of the &lt;xccdf:sub&gt; element during text substitution. The subType consists of a regular idrefType with an additional @use attribute to dictate the behavior of the &lt;xccdf:sub&gt; element under substitution. When the @idref is to an &lt;xccdf:Value&gt;, the @use attribute indicates whether the &lt;xccdf:Value&gt; element's title or value should replace the &lt;xccdf:sub&gt; element. The @use attribute is ignored when the @idref is to an &lt;xccdf:plain-text&gt; element; the body of the &lt;xccdf:plain-text&gt; element is always used to replace the &lt;xccdf:sub&gt; element.
type SubType struct {
	XMLName xml.Name

	// Use: Dictates the nature of the content inserted under text substitution processing.
	Use string `xml:"use,attr,omitempty"`

	// Idref: The id value of another XCCDF element
	Idref string `xml:"idref,attr"`
}

// IdrefType: Data type for elements that contain a reference to another XCCDF element
type IdrefType struct {
	XMLName xml.Name

	// Idref: The id value of another XCCDF element
	Idref string `xml:"idref,attr"`
}

// IdrefListType: Data type for elements contain list of references to other XCCDF elements
type IdrefListType struct {
	XMLName xml.Name

	// Idref: A space-separated list of id values from other XCCDF elements
	Idref string `xml:"idref,attr"`
}

// Cpe2IdrefType: Data type for &lt;xccdf:platform&gt; elements that do not need @override attributes. (I.e., &lt;xccdf:platform&gt; elements that are in structures that cannot be extended, such as &lt;xccdf:TestResult&gt; and &lt;xccdf:Benchmark&gt; elements.) This is used to identify the applicable target platform for its respective parent elements.
type Cpe2IdrefType struct {
	XMLName xml.Name

	// Idref: Should be a CPE 2.3 Applicability Language identifier using the Formatted String binding or the value of a &lt;cpe:platform-specification&gt; element's @id attribute, the latter acting as a reference to some expression defined using the CPE schema in the &lt;xccdf:Benchmark&gt; element's &lt;cpe:platform-specification&gt; element. The @idref may be a CPE Applicability Language identifier using the URI binding, although this is less preferred.
	Idref string `xml:"idref,attr"`
}

// OverrideableCpe2IdrefType: Data type for &lt;xccdf:platform&gt; elements that need @override attributes. (I.e., &lt;xccdf:platform&gt; elements that are in structures that can be extended, such as Items and &lt;xccdf:Profile&gt; elements.) This is used to identify the applicable target platform for its respective parent elements.
type OverrideableCpe2IdrefType struct {
	XMLName xml.Name

	// Override: Used to manage inheritance.
	Override string `xml:"override,attr,omitempty"`

	// Idref: Should be a CPE 2.3 Applicability Language identifier using the Formatted String binding or the value of a &lt;cpe:platform-specification&gt; element's @id attribute, the latter acting as a reference to some expression defined using the CPE schema in the &lt;xccdf:Benchmark&gt; element's &lt;cpe:platform-specification&gt; element. The @idref may be a CPE Applicability Language identifier using the URI binding, although this is less preferred.
	Idref string `xml:"idref,attr"`
}

// ItemType: This abstract itemType represents the basic data shared by all &lt;xccdf:Group&gt;, &lt;xccdf:Rule&gt; and &lt;xccdf:Value&gt; elements. All elements in an itemType are optional, although each element that builds on the itemType may add its own elements, some of which will be required for that element.
type ItemType struct {
	XMLName xml.Name

	// Abstract: If true, then this item is abstract and exists only to be extended. The use of this attribute for &lt;xccdf:Group&gt; elements is deprecated and should be avoided.
	Abstract bool `xml:"abstract,attr,omitempty"`

	// ClusterId: An identifier to be used as a means to identify (refer to) related items. It designates membership in a cluster of items, which are used for controlling items via &lt;xccdf:Profile&gt; elements. All the items with the same cluster identifier belong to the same cluster. A selector in an &lt;xccdf:Profile&gt; may refer to a cluster, thus making it easier for authors to create and maintain &lt;xccdf:Profile&gt; elements in a complex &lt;xccdf:Benchmark&gt;.
	ClusterId string `xml:"cluster-id,attr,omitempty"`

	// Extends: The identifier of an item on which to base this item. If present, it must have a value equal to the @id attribute of another item. The use of this attribute for &lt;xccdf:Group&gt; elements is deprecated and should be avoided.
	Extends string `xml:"extends,attr,omitempty"`

	// Hidden: If this item should be excluded from any generated documents although it may still be used during assessments.
	Hidden bool `xml:"hidden,attr,omitempty"`

	// ProhibitChanges: If benchmark producers should prohibit changes to this item during tailoring. An author should use this when they do not want to allow end users to change the item.
	ProhibitChanges bool `xml:"prohibitChanges,attr,omitempty"`

	XmlLang string `xml:"lang,attr"`

	XmlBase string `xml:"base,attr"`

	// Id: An identifier used for referencing elements included in an XML signature
	Id string `xml:"Id,attr,omitempty"`

	// Status: Status of the item and date at which it attained that status. &lt;xccdf:Benchmark&gt; authors may use this element to record the maturity or consensus level for elements in the &lt;xccdf:Benchmark&gt;. If an item does not have an explicit &lt;xccdf:status&gt; given, then its status is that of its parent.
	Status []Status `xml:"status"`

	// DcStatus: Holds additional status information using the Dublin Core format.
	DcStatus []DcStatusType `xml:"dc-status"`

	// Version: Version information about this item.
	Version *VersionType `xml:"version"`

	// Title: Title of the item. Every item should have an &lt;xccdf:title&gt;, because this helps people understand the purpose of the item.
	Title []TextWithSubType `xml:"title"`

	// Description: Text that describes the item.
	Description []HtmlTextWithSubType `xml:"description"`

	// Warning: A note or caveat about the item intended to convey important cautionary information for the &lt;xccdf:Benchmark&gt; user (e.g., “Complying with this rule will cause the system to reject all IP packets”). If multiple &lt;xccdf:warning&gt; elements appear, benchmark consumers should concatenate them for generating reports or documents. Benchmark consumers may present this information in a special manner in generated documents.
	Warning []WarningType `xml:"warning"`

	// Question: Interrogative text to present to the user during tailoring. It may also be included into a generated document. For &lt;xccdf:Rule&gt; and &lt;xccdf:Group&gt; elements, the &lt;xccdf:question&gt; text should be a simple binary (yes/no) question because it is supporting the selection aspect of tailoring. For &lt;xccdf:Value&gt; elements, the &lt;xccdf:question&gt; should solicit the user to provide a specific value. Tools may also display constraints on values and any defaults as specified by the other &lt;xccdf:Value&gt; properties.
	Question []TextType `xml:"question"`

	// Reference: References where the user can learn more about the subject of this item.
	Reference []ReferenceType `xml:"reference"`

	// Metadata: XML metadata associated with this item, such as sources, special information, or other details.
	Metadata []MetadataType `xml:"metadata"`
}

// SelectableItemType: This abstract item type represents the basic data shared by all &lt;xccdf:Group&gt; and &lt;xccdf:Rule&gt; elements.
type SelectableItemType struct {
	XMLName xml.Name

	// Selected: If true, this &lt;xccdf:Group&gt;/&lt;xccdf:Rule&gt; is selected to be processed as part of the &lt;xccdf:Benchmark&gt; when it is applied to a target system. An unselected &lt;xccdf:Group&gt; does not get processed, and its contents are not processed either (i.e., all descendants of an unselected &lt;xccdf:Group&gt; are implicitly unselected). An unselected &lt;xccdf:Rule&gt; is not checked and does not contribute to scoring.
	Selected string `xml:"selected,attr,omitempty"`

	// Weight: The relative scoring weight of this &lt;xccdf:Group&gt;/&lt;xccdf:Rule&gt;, for computing a score, expressed as a non-negative real number. It denotes the importance of an &lt;xccdf:Group&gt;/&lt;xccdf:Rule&gt;. Under some scoring models, scoring is computed independently for each collection of sibling &lt;xccdf:Group&gt; and &lt;xccdf:Rule&gt; elements, then normalized as part of the overall scoring process.
	Weight string `xml:"weight,attr,omitempty"`

	// Abstract: If true, then this item is abstract and exists only to be extended. The use of this attribute for &lt;xccdf:Group&gt; elements is deprecated and should be avoided.
	Abstract bool `xml:"abstract,attr,omitempty"`

	// ClusterId: An identifier to be used as a means to identify (refer to) related items. It designates membership in a cluster of items, which are used for controlling items via &lt;xccdf:Profile&gt; elements. All the items with the same cluster identifier belong to the same cluster. A selector in an &lt;xccdf:Profile&gt; may refer to a cluster, thus making it easier for authors to create and maintain &lt;xccdf:Profile&gt; elements in a complex &lt;xccdf:Benchmark&gt;.
	ClusterId string `xml:"cluster-id,attr,omitempty"`

	// Extends: The identifier of an item on which to base this item. If present, it must have a value equal to the @id attribute of another item. The use of this attribute for &lt;xccdf:Group&gt; elements is deprecated and should be avoided.
	Extends string `xml:"extends,attr,omitempty"`

	// Hidden: If this item should be excluded from any generated documents although it may still be used during assessments.
	Hidden bool `xml:"hidden,attr,omitempty"`

	// ProhibitChanges: If benchmark producers should prohibit changes to this item during tailoring. An author should use this when they do not want to allow end users to change the item.
	ProhibitChanges bool `xml:"prohibitChanges,attr,omitempty"`

	XmlLang string `xml:"lang,attr"`

	XmlBase string `xml:"base,attr"`

	// Id: An identifier used for referencing elements included in an XML signature
	Id string `xml:"Id,attr,omitempty"`

	// Rationale: Descriptive text giving rationale or motivations for abiding by this &lt;xccdf:Group&gt;/&lt;xccdf:Rule&gt; (i.e., why it is important to the security of the target platform).
	Rationale []HtmlTextWithSubType `xml:"rationale"`

	// Platform: Platforms to which this &lt;xccdf:Group&gt;/&lt;xccdf:Rule&gt; applies.
	Platform []OverrideableCpe2IdrefType `xml:"platform"`

	// Requires: The identifiers of other &lt;xccdf:Group&gt; or &lt;xccdf:Rule&gt; elements that must be selected for this &lt;xccdf:Group&gt;/&lt;xccdf:Rule&gt; to be evaluated and scored properly. Each &lt;xccdf:requires&gt; element specifies a list of one or more required items by their identifiers. If at least one of the specified &lt;xccdf:Group&gt; or &lt;xccdf:Rule&gt; elements is selected, the requirement is met.
	Requires []IdrefListType `xml:"requires"`

	// Conflicts: The identifier of another &lt;xccdf:Group&gt; or &lt;xccdf:Rule&gt; that must be unselected for this &lt;xccdf:Group&gt;/&lt;xccdf:Rule&gt; to be evaluated and scored properly. Each &lt;xccdf:conflicts&gt; element specifies a single conflicting item using its idref attribute. If the specified &lt;xccdf:Group&gt; or &lt;xccdf:Rule&gt; element is not selected, the requirement is met.
	Conflicts []IdrefType `xml:"conflicts"`

	// Status: Status of the item and date at which it attained that status. &lt;xccdf:Benchmark&gt; authors may use this element to record the maturity or consensus level for elements in the &lt;xccdf:Benchmark&gt;. If an item does not have an explicit &lt;xccdf:status&gt; given, then its status is that of its parent.
	Status []Status `xml:"status"`

	// DcStatus: Holds additional status information using the Dublin Core format.
	DcStatus []DcStatusType `xml:"dc-status"`

	// Version: Version information about this item.
	Version *VersionType `xml:"version"`

	// Title: Title of the item. Every item should have an &lt;xccdf:title&gt;, because this helps people understand the purpose of the item.
	Title []TextWithSubType `xml:"title"`

	// Description: Text that describes the item.
	Description []HtmlTextWithSubType `xml:"description"`

	// Warning: A note or caveat about the item intended to convey important cautionary information for the &lt;xccdf:Benchmark&gt; user (e.g., “Complying with this rule will cause the system to reject all IP packets”). If multiple &lt;xccdf:warning&gt; elements appear, benchmark consumers should concatenate them for generating reports or documents. Benchmark consumers may present this information in a special manner in generated documents.
	Warning []WarningType `xml:"warning"`

	// Question: Interrogative text to present to the user during tailoring. It may also be included into a generated document. For &lt;xccdf:Rule&gt; and &lt;xccdf:Group&gt; elements, the &lt;xccdf:question&gt; text should be a simple binary (yes/no) question because it is supporting the selection aspect of tailoring. For &lt;xccdf:Value&gt; elements, the &lt;xccdf:question&gt; should solicit the user to provide a specific value. Tools may also display constraints on values and any defaults as specified by the other &lt;xccdf:Value&gt; properties.
	Question []TextType `xml:"question"`

	// Reference: References where the user can learn more about the subject of this item.
	Reference []ReferenceType `xml:"reference"`

	// Metadata: XML metadata associated with this item, such as sources, special information, or other details.
	Metadata []MetadataType `xml:"metadata"`
}

// GroupType: Data type for the &lt;xccdf:Group&gt; element. A &lt;xccdf:Group&gt; element contains descriptive information about a portion of an &lt;xccdf:Benchmark&gt;, as well as &lt;xccdf:Rule&gt;, &lt;xccdf:Value&gt;, and/or other &lt;xccdf:Group&gt; elements
type GroupType struct {
	XMLName xml.Name

	// Id: Unique element identifier; used by other elements to refer to this element.
	Id string `xml:"id,attr"`

	// Selected: If true, this &lt;xccdf:Group&gt;/&lt;xccdf:Rule&gt; is selected to be processed as part of the &lt;xccdf:Benchmark&gt; when it is applied to a target system. An unselected &lt;xccdf:Group&gt; does not get processed, and its contents are not processed either (i.e., all descendants of an unselected &lt;xccdf:Group&gt; are implicitly unselected). An unselected &lt;xccdf:Rule&gt; is not checked and does not contribute to scoring.
	Selected string `xml:"selected,attr,omitempty"`

	// Weight: The relative scoring weight of this &lt;xccdf:Group&gt;/&lt;xccdf:Rule&gt;, for computing a score, expressed as a non-negative real number. It denotes the importance of an &lt;xccdf:Group&gt;/&lt;xccdf:Rule&gt;. Under some scoring models, scoring is computed independently for each collection of sibling &lt;xccdf:Group&gt; and &lt;xccdf:Rule&gt; elements, then normalized as part of the overall scoring process.
	Weight string `xml:"weight,attr,omitempty"`

	// Abstract: If true, then this item is abstract and exists only to be extended. The use of this attribute for &lt;xccdf:Group&gt; elements is deprecated and should be avoided.
	Abstract bool `xml:"abstract,attr,omitempty"`

	// ClusterId: An identifier to be used as a means to identify (refer to) related items. It designates membership in a cluster of items, which are used for controlling items via &lt;xccdf:Profile&gt; elements. All the items with the same cluster identifier belong to the same cluster. A selector in an &lt;xccdf:Profile&gt; may refer to a cluster, thus making it easier for authors to create and maintain &lt;xccdf:Profile&gt; elements in a complex &lt;xccdf:Benchmark&gt;.
	ClusterId string `xml:"cluster-id,attr,omitempty"`

	// Extends: The identifier of an item on which to base this item. If present, it must have a value equal to the @id attribute of another item. The use of this attribute for &lt;xccdf:Group&gt; elements is deprecated and should be avoided.
	Extends string `xml:"extends,attr,omitempty"`

	// Hidden: If this item should be excluded from any generated documents although it may still be used during assessments.
	Hidden bool `xml:"hidden,attr,omitempty"`

	// ProhibitChanges: If benchmark producers should prohibit changes to this item during tailoring. An author should use this when they do not want to allow end users to change the item.
	ProhibitChanges bool `xml:"prohibitChanges,attr,omitempty"`

	XmlLang string `xml:"lang,attr"`

	XmlBase string `xml:"base,attr"`

	// Value: &lt;xccdf:Value&gt; elements that belong to this &lt;xccdf:Group&gt;.
	Value []ValueType `xml:"Value"`

	// Signature: A digital signature asserting authorship and allowing verification of the integrity of the &lt;xccdf:Group&gt;.
	Signature *SignatureType `xml:"signature"`

	// Group: Sub-&lt;xccdf:Groups&gt; under this &lt;xccdf:Group&gt;.
	Group []GroupType `xml:"Group"`

	// Rule: &lt;xccdf:Rule&gt; elements that belong to this &lt;xccdf:Group&gt;.
	Rule []RuleType `xml:"Rule"`

	// Rationale: Descriptive text giving rationale or motivations for abiding by this &lt;xccdf:Group&gt;/&lt;xccdf:Rule&gt; (i.e., why it is important to the security of the target platform).
	Rationale []HtmlTextWithSubType `xml:"rationale"`

	// Platform: Platforms to which this &lt;xccdf:Group&gt;/&lt;xccdf:Rule&gt; applies.
	Platform []OverrideableCpe2IdrefType `xml:"platform"`

	// Requires: The identifiers of other &lt;xccdf:Group&gt; or &lt;xccdf:Rule&gt; elements that must be selected for this &lt;xccdf:Group&gt;/&lt;xccdf:Rule&gt; to be evaluated and scored properly. Each &lt;xccdf:requires&gt; element specifies a list of one or more required items by their identifiers. If at least one of the specified &lt;xccdf:Group&gt; or &lt;xccdf:Rule&gt; elements is selected, the requirement is met.
	Requires []IdrefListType `xml:"requires"`

	// Conflicts: The identifier of another &lt;xccdf:Group&gt; or &lt;xccdf:Rule&gt; that must be unselected for this &lt;xccdf:Group&gt;/&lt;xccdf:Rule&gt; to be evaluated and scored properly. Each &lt;xccdf:conflicts&gt; element specifies a single conflicting item using its idref attribute. If the specified &lt;xccdf:Group&gt; or &lt;xccdf:Rule&gt; element is not selected, the requirement is met.
	Conflicts []IdrefType `xml:"conflicts"`

	// Status: Status of the item and date at which it attained that status. &lt;xccdf:Benchmark&gt; authors may use this element to record the maturity or consensus level for elements in the &lt;xccdf:Benchmark&gt;. If an item does not have an explicit &lt;xccdf:status&gt; given, then its status is that of its parent.
	Status []Status `xml:"status"`

	// DcStatus: Holds additional status information using the Dublin Core format.
	DcStatus []DcStatusType `xml:"dc-status"`

	// Version: Version information about this item.
	Version *VersionType `xml:"version"`

	// Title: Title of the item. Every item should have an &lt;xccdf:title&gt;, because this helps people understand the purpose of the item.
	Title []TextWithSubType `xml:"title"`

	// Description: Text that describes the item.
	Description []HtmlTextWithSubType `xml:"description"`

	// Warning: A note or caveat about the item intended to convey important cautionary information for the &lt;xccdf:Benchmark&gt; user (e.g., “Complying with this rule will cause the system to reject all IP packets”). If multiple &lt;xccdf:warning&gt; elements appear, benchmark consumers should concatenate them for generating reports or documents. Benchmark consumers may present this information in a special manner in generated documents.
	Warning []WarningType `xml:"warning"`

	// Question: Interrogative text to present to the user during tailoring. It may also be included into a generated document. For &lt;xccdf:Rule&gt; and &lt;xccdf:Group&gt; elements, the &lt;xccdf:question&gt; text should be a simple binary (yes/no) question because it is supporting the selection aspect of tailoring. For &lt;xccdf:Value&gt; elements, the &lt;xccdf:question&gt; should solicit the user to provide a specific value. Tools may also display constraints on values and any defaults as specified by the other &lt;xccdf:Value&gt; properties.
	Question []TextType `xml:"question"`

	// Reference: References where the user can learn more about the subject of this item.
	Reference []ReferenceType `xml:"reference"`

	// Metadata: XML metadata associated with this item, such as sources, special information, or other details.
	Metadata []MetadataType `xml:"metadata"`
}

// RuleType: Data type for the &lt;xccdf:Rule&gt; element that represents a specific &lt;xccdf:Benchmark&gt; test.
type RuleType struct {
	XMLName xml.Name

	// Id: Unique element identifier used by other elements to refer to this element.
	Id string `xml:"id,attr"`

	// Role: The &lt;xccdf:Rule&gt; element’s role in scoring and reporting.
	Role string `xml:"role,attr,omitempty"`

	// Severity: Severity level code to be used for metrics and tracking.
	Severity string `xml:"severity,attr,omitempty"`

	// Multiple: Applicable in cases where there are multiple instances of a target. For example, an &lt;xccdf:Rule&gt; may provide a recommendation about the configuration of application user accounts, but an application may have many user accounts. Each account would be considered an instance of the broader assessment target of user accounts. If the @multiple attribute is set to true, each instance of the target to which the &lt;xccdf:Rule&gt; can apply should be tested separately and the results should be recorded separately. If @multiple is set to false, the test results of such instances should be combined. If the checking system does not combine these results automatically, the results of each instance should be ANDed together to produce a single result. If the benchmark consumer cannot perform multiple instantiation, or if multiple instantiation of the &lt;xccdf:Rule&gt; is not applicable for the target system, then the benchmark consumer may ignore this attribute.
	Multiple string `xml:"multiple,attr,omitempty"`

	// Selected: If true, this &lt;xccdf:Group&gt;/&lt;xccdf:Rule&gt; is selected to be processed as part of the &lt;xccdf:Benchmark&gt; when it is applied to a target system. An unselected &lt;xccdf:Group&gt; does not get processed, and its contents are not processed either (i.e., all descendants of an unselected &lt;xccdf:Group&gt; are implicitly unselected). An unselected &lt;xccdf:Rule&gt; is not checked and does not contribute to scoring.
	Selected string `xml:"selected,attr,omitempty"`

	// Weight: The relative scoring weight of this &lt;xccdf:Group&gt;/&lt;xccdf:Rule&gt;, for computing a score, expressed as a non-negative real number. It denotes the importance of an &lt;xccdf:Group&gt;/&lt;xccdf:Rule&gt;. Under some scoring models, scoring is computed independently for each collection of sibling &lt;xccdf:Group&gt; and &lt;xccdf:Rule&gt; elements, then normalized as part of the overall scoring process.
	Weight string `xml:"weight,attr,omitempty"`

	// Abstract: If true, then this item is abstract and exists only to be extended. The use of this attribute for &lt;xccdf:Group&gt; elements is deprecated and should be avoided.
	Abstract bool `xml:"abstract,attr,omitempty"`

	// ClusterId: An identifier to be used as a means to identify (refer to) related items. It designates membership in a cluster of items, which are used for controlling items via &lt;xccdf:Profile&gt; elements. All the items with the same cluster identifier belong to the same cluster. A selector in an &lt;xccdf:Profile&gt; may refer to a cluster, thus making it easier for authors to create and maintain &lt;xccdf:Profile&gt; elements in a complex &lt;xccdf:Benchmark&gt;.
	ClusterId string `xml:"cluster-id,attr,omitempty"`

	// Extends: The identifier of an item on which to base this item. If present, it must have a value equal to the @id attribute of another item. The use of this attribute for &lt;xccdf:Group&gt; elements is deprecated and should be avoided.
	Extends string `xml:"extends,attr,omitempty"`

	// Hidden: If this item should be excluded from any generated documents although it may still be used during assessments.
	Hidden bool `xml:"hidden,attr,omitempty"`

	// ProhibitChanges: If benchmark producers should prohibit changes to this item during tailoring. An author should use this when they do not want to allow end users to change the item.
	ProhibitChanges bool `xml:"prohibitChanges,attr,omitempty"`

	XmlLang string `xml:"lang,attr"`

	XmlBase string `xml:"base,attr"`

	// Ident: A globally meaningful identifier for this &lt;xccdf:Rule&gt;. This may be the name or identifier of a security configuration issue or vulnerability that the &lt;xccdf:Rule&gt; assesses.
	Ident []IdentType `xml:"ident"`

	// ImpactMetric: The potential impact of failure to conform to the &lt;xccdf:Rule&gt;, expressed as a CVSS 2.0 base vector.
	ImpactMetric string `xml:"impact-metric"`

	// ProfileNote: Text that describes special aspects of the &lt;xccdf:Rule&gt; related to one or more &lt;xccdf:Profile&gt; elements. This allows an author to document things within &lt;xccdf:Rule&gt; elements that are specific to a given &lt;xccdf:Profile&gt;, and then select the appropriate text based on the selected &lt;xccdf:Profile&gt; and display it to the reader.
	ProfileNote []ProfileNoteType `xml:"profile-note"`

	// Fixtext: Data that describes how to bring a target system into compliance with this &lt;xccdf:Rule&gt;.
	Fixtext []FixTextType `xml:"fixtext"`

	// Fix: A command string, script, or other system modification statement that, if executed on the target system, can bring it into full, or at least better, compliance with this &lt;xccdf:Rule&gt;.
	Fix []FixType `xml:"fix"`

	// Signature: A digital signature asserting authorship and allowing verification of the integrity of the &lt;xccdf:Rule&gt;.
	Signature *SignatureType `xml:"signature"`

	// Check: The definition of, or a reference to, the target system check needed to test compliance with this &lt;xccdf:Rule&gt;. Sibling &lt;xccdf:check&gt; elements must have different values for the combination of their @selector and @system attributes, and must have different values for their @id attribute (if any).
	Check []CheckType `xml:"check"`

	// ComplexCheck: A boolean expression composed of operators (and, or, not) and individual checks.
	ComplexCheck *ComplexCheckType `xml:"complex-check"`

	// Rationale: Descriptive text giving rationale or motivations for abiding by this &lt;xccdf:Group&gt;/&lt;xccdf:Rule&gt; (i.e., why it is important to the security of the target platform).
	Rationale []HtmlTextWithSubType `xml:"rationale"`

	// Platform: Platforms to which this &lt;xccdf:Group&gt;/&lt;xccdf:Rule&gt; applies.
	Platform []OverrideableCpe2IdrefType `xml:"platform"`

	// Requires: The identifiers of other &lt;xccdf:Group&gt; or &lt;xccdf:Rule&gt; elements that must be selected for this &lt;xccdf:Group&gt;/&lt;xccdf:Rule&gt; to be evaluated and scored properly. Each &lt;xccdf:requires&gt; element specifies a list of one or more required items by their identifiers. If at least one of the specified &lt;xccdf:Group&gt; or &lt;xccdf:Rule&gt; elements is selected, the requirement is met.
	Requires []IdrefListType `xml:"requires"`

	// Conflicts: The identifier of another &lt;xccdf:Group&gt; or &lt;xccdf:Rule&gt; that must be unselected for this &lt;xccdf:Group&gt;/&lt;xccdf:Rule&gt; to be evaluated and scored properly. Each &lt;xccdf:conflicts&gt; element specifies a single conflicting item using its idref attribute. If the specified &lt;xccdf:Group&gt; or &lt;xccdf:Rule&gt; element is not selected, the requirement is met.
	Conflicts []IdrefType `xml:"conflicts"`

	// Status: Status of the item and date at which it attained that status. &lt;xccdf:Benchmark&gt; authors may use this element to record the maturity or consensus level for elements in the &lt;xccdf:Benchmark&gt;. If an item does not have an explicit &lt;xccdf:status&gt; given, then its status is that of its parent.
	Status []Status `xml:"status"`

	// DcStatus: Holds additional status information using the Dublin Core format.
	DcStatus []DcStatusType `xml:"dc-status"`

	// Version: Version information about this item.
	Version *VersionType `xml:"version"`

	// Title: Title of the item. Every item should have an &lt;xccdf:title&gt;, because this helps people understand the purpose of the item.
	Title []TextWithSubType `xml:"title"`

	// Description: Text that describes the item.
	Description []HtmlTextWithSubType `xml:"description"`

	// Warning: A note or caveat about the item intended to convey important cautionary information for the &lt;xccdf:Benchmark&gt; user (e.g., “Complying with this rule will cause the system to reject all IP packets”). If multiple &lt;xccdf:warning&gt; elements appear, benchmark consumers should concatenate them for generating reports or documents. Benchmark consumers may present this information in a special manner in generated documents.
	Warning []WarningType `xml:"warning"`

	// Question: Interrogative text to present to the user during tailoring. It may also be included into a generated document. For &lt;xccdf:Rule&gt; and &lt;xccdf:Group&gt; elements, the &lt;xccdf:question&gt; text should be a simple binary (yes/no) question because it is supporting the selection aspect of tailoring. For &lt;xccdf:Value&gt; elements, the &lt;xccdf:question&gt; should solicit the user to provide a specific value. Tools may also display constraints on values and any defaults as specified by the other &lt;xccdf:Value&gt; properties.
	Question []TextType `xml:"question"`

	// Reference: References where the user can learn more about the subject of this item.
	Reference []ReferenceType `xml:"reference"`

	// Metadata: XML metadata associated with this item, such as sources, special information, or other details.
	Metadata []MetadataType `xml:"metadata"`
}

// IdentType: Data type for the &lt;xccdf:ident&gt; element, a globally meaningful identifier for an &lt;xccdf:Rule&gt;. The body of &lt;xccdf:ident&gt; element is the name or identifier of a security configuration issue or vulnerability that the &lt;xccdf:Rule&gt; addresses. It has an associated URI that denotes the organization or naming scheme that assigned the name. By setting an &lt;xccdf:ident&gt; element on an &lt;xccdf:Rule&gt;, the &lt;xccdf:Benchmark&gt; author effectively declares that the &lt;xccdf:Rule&gt; instantiates, implements, or remediates the issue for which the name was assigned.
type IdentType struct {
	XMLName xml.Name

	// System: Denotes the organization or naming scheme that assigned the identifier.
	System string `xml:"system,attr"`

	Text string `xml:",chardata"`
}

// WarningType: Data type for the &lt;xccdf:warning&gt; element under the &lt;xccdf:Rule&gt; element. This element holds a note or caveat about the item intended to convey important cautionary information for the &lt;xccdf:Benchmark&gt; user.
type WarningType struct {
	XMLName xml.Name

	// Category: A hint as to the nature of the warning.
	Category string `xml:"category,attr,omitempty"`

	XmlLang string `xml:"lang,attr"`

	// Override: Used to manage inheritance.
	Override bool `xml:"override,attr,omitempty"`

	// Sub: Specifies an &lt;xccdf:Value&gt; or &lt;xccdf:plain-text&gt; element to be used for text substitution
	Sub []SubType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

// FixTextType: Data type for the &lt;xccdf:fixtext&gt; element, which contains data that describes how to bring a target system into compliance with an &lt;xccdf:Rule&gt;. Each &lt;xccdf:fixtext&gt; element may be associated with one or more &lt;xccdf:fix&gt; elements through the @fixref attribute. The body holds explanatory text about the fix procedures.
type FixTextType struct {
	XMLName xml.Name

	// Fixref: A reference to the @id of an &lt;xccdf:fix&gt; element.
	Fixref string `xml:"fixref,attr,omitempty"`

	// Reboot: True if a reboot is known to be required and false otherwise.
	Reboot bool `xml:"reboot,attr,omitempty"`

	// Strategy: The method or approach for making the described fix.
	Strategy FixStrategyEnumType `xml:"strategy,attr,omitempty"`

	// Disruption: An estimate of the potential for disruption or operational degradation that the application of this fix will impose on the target.
	Disruption RatingEnumType `xml:"disruption,attr,omitempty"`

	// Complexity: The estimated complexity or difficulty of applying the fix to the target.
	Complexity RatingEnumType `xml:"complexity,attr,omitempty"`

	XmlLang string `xml:"lang,attr"`

	// Override: Used to manage inheritance.
	Override bool `xml:"override,attr,omitempty"`

	// Sub: Specifies an &lt;xccdf:Value&gt; or &lt;xccdf:plain-text&gt; element to be used for text substitution
	Sub []SubType `xml:",any"`

	InnerXml string `xml:",innerxml"`
}

// FixType: Data type for the &lt;xccdf:fix&gt; element. The body of this element contains a command string, script, or other system modification statement that, if executed on the target system, can bring it into full, or at least better, compliance with this &lt;xccdf:Rule&gt;.
type FixType struct {
	XMLName xml.Name

	// Id: A local identifier for the element. It is optional for the @id to be unique; multiple &lt;xccdf:fix&gt; elements may have the same @id but different values for their other attributes. It is used primarily to allow &lt;xccdf:fixtext&gt; elements to be associated with one or more &lt;xccdf:fix&gt; elements
	Id string `xml:"id,attr,omitempty"`

	// Reboot: True if a reboot is known to be required and false otherwise.
	Reboot bool `xml:"reboot,attr,omitempty"`

	// Strategy: The method or approach for making the described fix.
	Strategy FixStrategyEnumType `xml:"strategy,attr,omitempty"`

	// Disruption: An estimate of the potential for disruption or operational degradation that the application of this fix will impose on the target.
	Disruption RatingEnumType `xml:"disruption,attr,omitempty"`

	// Complexity: The estimated complexity or difficulty of applying the fix to the target.
	Complexity RatingEnumType `xml:"complexity,attr,omitempty"`

	// System: A URI that identifies the scheme, language, engine, or process for which the fix contents are written. Table 17 in the XCCDF specification defines several general-purpose URNs that may be used for this, and tool vendors and system providers may define and use target-specific URNs.
	System string `xml:"system,attr,omitempty"`

	// Platform: In case different fix scripts or procedures are required for different target platform types (e.g., different patches for Windows Vista and Windows 7), this attribute allows a CPE name or CPE applicability language expression to be associated with an &lt;xccdf:fix&gt; element. This should appear on an &lt;xccdf:fix&gt; when the content applies to only one platform out of several to which the &lt;xccdf:Rule&gt; could apply.
	Platform string `xml:"platform,attr,omitempty"`

	// Sub: Specifies an &lt;xccdf:Value&gt; or &lt;xccdf:plain-text&gt; element to be used for text substitution
	Sub []SubType `xml:"sub"`

	// Instance: Designates a spot where the name of the instance should be substituted into the fix template to generate the final fix data. If the @context attribute is omitted, the value of the @context defaults to “undefined”.
	Instance []InstanceFixType `xml:"instance"`

	InnerXml string `xml:",innerxml"`
}

// InstanceFixType: Type for an &lt;xccdf:instance&gt; element which may appear in an &lt;xccdf:fix&gt; element. The &lt;xccdf:instance&gt; element inside an &lt;xccdf:fix&gt; element designates a spot where the name of the instance should be substituted into the fix template to generate the final fix data.
type InstanceFixType struct {
	XMLName xml.Name

	// Context: Describes the scope or significance of the instance content. The context attribute is intended to be informative and does not affect basic processing.
	Context string `xml:"context,attr,omitempty"`
}

// ComplexCheckType: The type for an element that contains a boolean combination of &lt;xccdf:checks&gt;. This element can have only &lt;xccdf:complex-check&gt; and &lt;xccdf:check&gt; elements as children. Child elements may appear in any order but at least one child element must be present. It has two attributes, @operator and @negate, which dictate how &lt;xccdf:check&gt; or &lt;xccdf:complex-check&gt; child elements are to be combined. Truth tables for these operations appear below.
type ComplexCheckType struct {
	XMLName xml.Name

	// Operator: Indicates whether the child &lt;xccdf:check&gt; and/or &lt;xccdf:complex-check&gt; elements of this &lt;xccdf:complex-check&gt; should be combined using an AND or OR operation
	Operator CcOperatorEnumType `xml:"operator,attr"`

	// Negate: If true, negate the final result of this &lt;xccdf:complex-check&gt; after the child elements are combined using the identified operator.
	Negate bool `xml:"negate,attr,omitempty"`

	// Check: Instructions for a single test.
	Check []CheckType `xml:"check"`

	// ComplexCheck: A child &lt;xccdf:complex-check&gt;, allowing another level of logic in combining component checks.
	ComplexCheck []ComplexCheckType `xml:"complex-check"`
}

// CheckType: Data type for the &lt;xccdf:check&gt; element. The &lt;xccdf:check&gt; element identifies instructions for tests to determine compliance with the &lt;xccdf:Rule&gt; as well as parameters controlling the reporting of those test results. The &lt;xccdf:check&gt; element must have at least one child element.
type CheckType struct {
	XMLName xml.Name

	// System: The URI for a checking system. If the checking system uses XML namespaces, then the system attribute for the system should be its namespace.
	System string `xml:"system,attr"`

	// Negate: If set to true, the final result of the &lt;xccdf:check&gt; is negated according to the truth table given below.
	Negate bool `xml:"negate,attr,omitempty"`

	// Id: Unique identifier for this element. Optional, but must be globally unique if present.
	Id string `xml:"id,attr,omitempty"`

	// Selector: This may be referenced from &lt;xccdf:Profile&gt; selection elements or used during manual tailoring to refine the application of the &lt;xccdf:Rule&gt;. If no selector values are specified for a given &lt;xccdf:Rule&gt; by &lt;xccdf:Profile&gt; elements or manual tailoring, all &lt;xccdf:check&gt; elements with non-empty @selector attributes are ignored. If an &lt;xccdf:Rule&gt; has multiple &lt;xccdf:check&gt; elements with the same @selector attribute, each must employ a different checking system, as identified by the @system attribute of the &lt;xccdf:check&gt; element.
	Selector string `xml:"selector,attr,omitempty"`

	// MultiCheck: Applicable in cases where multiple checks are executed to determine compliance with a single &lt;xccdf:Rule&gt;. This situation can arise when an &lt;xccdf:check&gt; includes an &lt;xccdf:check-content-ref&gt; element that does not include a @name attribute. The default behavior of a nameless &lt;xccdf:check-content-ref&gt; is to execute all checks in the referenced check content location and AND their results together into a single &lt;xccdf:rule-result&gt; using the AND truth table below. This corresponds to a @multi-check attribute value of “false”. If, however, the @multi-check attribute is set to "true" and a nameless &lt;xccdf:check-content-ref&gt; is used, the &lt;xccdf:Rule&gt; produces a separate &lt;xccdf:rule-result&gt; for each check.
	MultiCheck bool `xml:"multi-check,attr,omitempty"`

	XmlBase string `xml:"base,attr"`

	// CheckImport: Identifies a value to be retrieved from the checking system during testing of a target system. This element's body must be empty within an &lt;xccdf:check&gt;. After the associated check results have been collected, the result structure returned by the checking engine is processed to collect the named information. This information is then recorded in the check-import element in the corresponding &lt;xccdf:rule-result&gt;.
	CheckImport []CheckImportType `xml:"check-import"`

	// CheckExport: A mapping from an &lt;xccdf:Value&gt; element to a checking system variable (i.e., external name or id for use by the checking system). This supports export of tailoring values from the XCCDF processing environment to the checking system.
	CheckExport []CheckExportType `xml:"check-export"`

	// CheckContentRef: Points to code for a detached check in another location that uses the language or system specified by the &lt;xccdf:check&gt; element’s @system attribute. If multiple &lt;xccdf:check-content-ref&gt; elements appear, they represent alternative locations from which a benchmark consumer may obtain the check content. Benchmark consumers should process the alternatives in the order in which they appear in the XML. The first &lt;xccdf:check-content-ref&gt; from which content can be successfully retrieved should be used.
	CheckContentRef []CheckContentRefType `xml:"check-content-ref"`

	// CheckContent: Holds the actual code of a check, in the language or system specified by the &lt;xccdf:check&gt; element’s @system attribute. If both &lt;xccdf:check-content-ref&gt; and &lt;xccdf:check-content&gt; elements appear in a single &lt;xccdf:check&gt; element, benchmark consumers should use the &lt;xccdf:check-content&gt; element only if none of the references can be resolved to provide content.
	CheckContent *CheckContentType `xml:"check-content"`
}

// CheckImportType: Data type for the &lt;xccdf:check-import&gt; element, which specifies a value that the &lt;xccdf:Benchmark&gt; author wishes to retrieve from the checking system during testing of a target system. The @import-name attribute identifies some structure in the checking system that is then retrieved. The mapping from the values of this attribute to specific checking system structures is beyond the scope of the XCCDF specification. When the &lt;xccdf:check-import&gt; element appears in the context of an &lt;xccdf:Rule&gt;, then it should be empty and any content must be ignored. When the &lt;xccdf:check-import&gt; element appears in the context of an &lt;xccdf:rule-result&gt;, then its body holds the imported value.
type CheckImportType struct {
	XMLName xml.Name

	// ImportName: An identifier indicating some structure in the checking system to be collected.
	ImportName string `xml:"import-name,attr"`

	// ImportXpath: An XPath that is used to select specific values or structures from the imported structure. This allows further refinement of the collected data if the imported value takes the form of XML structures.
	ImportXpath string `xml:"import-xpath,attr,omitempty"`

	InnerXml string `xml:",innerxml"`
}

// CheckExportType: Data type for the &lt;xccdf:check-export&gt; element, which specifies a mapping from an &lt;xccdf:Value&gt; element to a checking system variable (i.e., external name or id for use by the checking system). This supports export of tailoring &lt;xccdf:Value&gt; elements from the XCCDF processing environment to the checking system. The interface between the XCCDF benchmark consumer and the checking system should support, at a minimum, passing the &lt;xccdf:value&gt; property of the &lt;xccdf:Value&gt; element, but may also support passing the &lt;xccdf:Value&gt; element's @type and @operator properties.
type CheckExportType struct {
	XMLName xml.Name

	// ValueId: The id of the &lt;xccdf:Value&gt; element to export.
	ValueId string `xml:"value-id,attr"`

	// ExportName: An identifier indicating some structure in the checking system into which the identified &lt;xccdf:Value&gt; element's properties will be mapped.
	ExportName string `xml:"export-name,attr"`
}

// CheckContentRefType: Data type for the &lt;xccdf:check-content-ref&gt; element, which points to the code for a detached check in another file. This element has no body, just a couple of attributes: @href and @name. The @name is optional, if it does not appear then this reference is to the entire document.
type CheckContentRefType struct {
	XMLName xml.Name

	// Href: Identifies the referenced document containing checking instructions.
	Href string `xml:"href,attr"`

	// Name: Identifies a particular part or element of the referenced check document.
	Name string `xml:"name,attr"`
}

// CheckContentType: Data type for the &lt;xccdf:check-content&gt; element. The body of this element holds the actual code of a check, in the language or system specified by the &lt;xccdf:check&gt; element’s @system attribute. The body of this element may be any XML, but cannot contain any XCCDF elements. XCCDF tools do not process its content directly but instead pass the content directly to checking engines.
type CheckContentType struct {
	XMLName xml.Name

	InnerXml string `xml:",innerxml"`
}

// ValueType: Data type for the &lt;xccdf:Value&gt; element, which is a named parameter that can be substituted into properties of other elements within the &lt;xccdf:Benchmark&gt;, including the interior of structured check specifications and fix scripts.
type ValueType struct {
	XMLName xml.Name

	// Id: The unique identifier for this element.
	Id string `xml:"id,attr"`

	// Type: The data type of the &lt;xccdf:Value&gt;. A tool may choose any convenient form to store an &lt;xccdf:Value&gt; element’s &lt;xccdf:value&gt; element, but the @type attribute conveys how the &lt;xccdf:Value&gt; should be treated for user input validation purposes during tailoring processing. The @type attribute may also be used to give additional guidance to the user or to validate the user’s input. In the case of a list of values, the @type attribute, if present, applies to all elements of the list individually.
	Type string `xml:"type,attr,omitempty"`

	// Operator: The operator to be used for comparing this &lt;xccdf:Value&gt; to some part of the test system’s configuration during &lt;xccdf:Rule&gt; checking.
	Operator string `xml:"operator,attr,omitempty"`

	// Interactive: Whether tailoring for this &lt;xccdf:Value&gt; should be performed during &lt;xccdf:Benchmark&gt; application. The benchmark consumer may ignore the attribute if asking the user is not feasible or not supported.
	Interactive string `xml:"interactive,attr,omitempty"`

	// InterfaceHint: A hint or recommendation to a benchmark consumer or producer about how the user might select or adjust the &lt;xccdf:Value&gt;.
	InterfaceHint string `xml:"interfaceHint,attr,omitempty"`

	// Abstract: If true, then this item is abstract and exists only to be extended. The use of this attribute for &lt;xccdf:Group&gt; elements is deprecated and should be avoided.
	Abstract bool `xml:"abstract,attr,omitempty"`

	// ClusterId: An identifier to be used as a means to identify (refer to) related items. It designates membership in a cluster of items, which are used for controlling items via &lt;xccdf:Profile&gt; elements. All the items with the same cluster identifier belong to the same cluster. A selector in an &lt;xccdf:Profile&gt; may refer to a cluster, thus making it easier for authors to create and maintain &lt;xccdf:Profile&gt; elements in a complex &lt;xccdf:Benchmark&gt;.
	ClusterId string `xml:"cluster-id,attr,omitempty"`

	// Extends: The identifier of an item on which to base this item. If present, it must have a value equal to the @id attribute of another item. The use of this attribute for &lt;xccdf:Group&gt; elements is deprecated and should be avoided.
	Extends string `xml:"extends,attr,omitempty"`

	// Hidden: If this item should be excluded from any generated documents although it may still be used during assessments.
	Hidden bool `xml:"hidden,attr,omitempty"`

	// ProhibitChanges: If benchmark producers should prohibit changes to this item during tailoring. An author should use this when they do not want to allow end users to change the item.
	ProhibitChanges bool `xml:"prohibitChanges,attr,omitempty"`

	XmlLang string `xml:"lang,attr"`

	XmlBase string `xml:"base,attr"`

	// Match: A Perl Compatible Regular Expression that a benchmark producer may apply during tailoring to validate a user’s input for the &lt;xccdf:Value&gt;. It uses implicit anchoring. It applies only when the @type property is “string” or “number” or a list of strings and/or numbers.
	Match []SelStringType `xml:"match"`

	// LowerBound: Minimum legal value for this &lt;xccdf:Value&gt;. It is used to constrain value input during tailoring, when the @type property is “number”. Values supplied by the user for tailoring the &lt;xccdf:Benchmark&gt; must be equal to or greater than this number.
	LowerBound []SelNumType `xml:"lower-bound"`

	// UpperBound: Maximum legal value for this &lt;xccdf:Value&gt;. It is used to constrain value input during tailoring, when the @type is “number”. Values supplied by the user for tailoring the &lt;xccdf:Benchmark&gt; must be less than or equal to than this number.
	UpperBound []SelNumType `xml:"upper-bound"`

	// Choices: A list of legal or suggested choices (values) for an &lt;xccdf:Value&gt; element, to be used during tailoring and document generation.
	Choices []SelChoicesType `xml:"choices"`

	// Source: URI indicating where the tool may acquire values, value bounds, or value choices for this &lt;xccdf:Value&gt; element. XCCDF does not attach any meaning to the URI; it may be an arbitrary community or tool-specific value, or a pointer directly to a resource. If several instances of the &lt;xccdf:source&gt; property appear, then they represent alternative means or locations for obtaining the value in descending order of preference (i.e., most preferred first).
	Source []UriRefType `xml:"source"`

	// Signature: A digital signature asserting authorship and allowing verification of the integrity of the &lt;xccdf:Value&gt;.
	Signature *SignatureType `xml:"signature"`

	// Value: A simple (number, string, or boolean) value associated with this &lt;xccdf:Value&gt;. At any time an &lt;xccdf:Value&gt; has one active (simple or complex) value. If a selector value has been provided under &lt;xccdf:Profile&gt; selection or tailoring then the active &lt;xccdf:value&gt;/&lt;xccdf:complex-value&gt; is the one with a matching @selector. If there is no provided selector or if the provided selector does not match the @selector attribute of any &lt;xccdf:value&gt; or &lt;xccdf:complex-value&gt;, the active &lt;xccdf:value&gt;/&lt;xccdf:complex-value&gt; is the one with an empty or absent @selector or, failing that, the first &lt;xccdf:value&gt; or &lt;xccdf:complex-value&gt; in the XML. When an &lt;xccdf:Value&gt; is exported or used in text substitution, it is the currently active &lt;xccdf:value&gt; or &lt;xccdf:complex-value&gt; that is actually used. If there are multiple &lt;xccdf:value&gt; and/or &lt;xccdf:complex-value&gt; elements, only one may omit a @selector attribute and no two may have the same @selector value.
	Value []SelStringType `xml:"value"`

	// ComplexValue: A complex (list) value associated with this &lt;xccdf:Value&gt;. See the description of the &lt;xccdf:value&gt; property for &lt;xccdf:Rule&gt; elements regarding activation of an &lt;xccdf:complex-value&gt;.
	ComplexValue []SelComplexValueType `xml:"complex-value"`

	// Default: The default value displayed to the user as a suggestion by benchmark producers during tailoring of this &lt;xccdf:Value&gt; element. (This is not the default value of an &lt;xccdf:Value&gt;; it is just the default display.) If there are multiple &lt;xccdf:default&gt; and/or &lt;xccdf:complex-default&gt; elements, only one may omit a @selector attribute and no two may have the same @selector value.
	Default []SelStringType `xml:"default"`

	// ComplexDefault: The default &lt;xccdf:complex-value&gt; displayed to the user as a suggestion by benchmark producers during tailoring of this &lt;xccdf:Value&gt; element. (This is not the default value of an &lt;xccdf:Value&gt;; it is just the default display.) If there are multiple &lt;xccdf:default&gt; and &lt;xccdf:complex-default&gt; elements, only one may omit a @selector attribute and no two may have the same @selector value.
	ComplexDefault []SelComplexValueType `xml:"complex-default"`

	// Status: Status of the item and date at which it attained that status. &lt;xccdf:Benchmark&gt; authors may use this element to record the maturity or consensus level for elements in the &lt;xccdf:Benchmark&gt;. If an item does not have an explicit &lt;xccdf:status&gt; given, then its status is that of its parent.
	Status []Status `xml:"status"`

	// DcStatus: Holds additional status information using the Dublin Core format.
	DcStatus []DcStatusType `xml:"dc-status"`

	// Version: Version information about this item.
	Version *VersionType `xml:"version"`

	// Title: Title of the item. Every item should have an &lt;xccdf:title&gt;, because this helps people understand the purpose of the item.
	Title []TextWithSubType `xml:"title"`

	// Description: Text that describes the item.
	Description []HtmlTextWithSubType `xml:"description"`

	// Warning: A note or caveat about the item intended to convey important cautionary information for the &lt;xccdf:Benchmark&gt; user (e.g., “Complying with this rule will cause the system to reject all IP packets”). If multiple &lt;xccdf:warning&gt; elements appear, benchmark consumers should concatenate them for generating reports or documents. Benchmark consumers may present this information in a special manner in generated documents.
	Warning []WarningType `xml:"warning"`

	// Question: Interrogative text to present to the user during tailoring. It may also be included into a generated document. For &lt;xccdf:Rule&gt; and &lt;xccdf:Group&gt; elements, the &lt;xccdf:question&gt; text should be a simple binary (yes/no) question because it is supporting the selection aspect of tailoring. For &lt;xccdf:Value&gt; elements, the &lt;xccdf:question&gt; should solicit the user to provide a specific value. Tools may also display constraints on values and any defaults as specified by the other &lt;xccdf:Value&gt; properties.
	Question []TextType `xml:"question"`

	// Reference: References where the user can learn more about the subject of this item.
	Reference []ReferenceType `xml:"reference"`

	// Metadata: XML metadata associated with this item, such as sources, special information, or other details.
	Metadata []MetadataType `xml:"metadata"`
}

// ComplexValueType: Data type that supports values that are lists of simple types. Each element in the list is represented by an instance of the &lt;xccdf:item&gt; child element. If there are no &lt;xccdf:item&gt; child elements then this represents an empty list.
type ComplexValueType struct {
	XMLName xml.Name

	// Item: A single item in the list of values.
	Item []string `xml:",any"`
}

// SelComplexValueType: Data type that supports values that are lists of simple types with an associated @selector attribute used in tailoring.
type SelComplexValueType struct {
	XMLName xml.Name

	// Selector: This may be referenced from &lt;xccdf:Profile&gt; selection elements or used during manual tailoring to refine the application of this property. If no selectors are specified for a given item by &lt;xccdf:Profile&gt; elements or manual tailoring, properties with empty or non-existent @selector attributes are activated. If a selector is applied that does not match the @selector attribute of any of a given type of property, then no &lt;xccdf:choices&gt; element is considered activated. The only exception is the &lt;xccdf:value&gt; and &lt;xccdf:complex-value&gt; properties of an &lt;xccdf:Value&gt; element - if there is no &lt;xccdf:value&gt; or &lt;xccdf:complex-value&gt; property with a matching @selector value then the &lt;xccdf:value&gt;/&lt;xccdf:complex-value&gt; property with an empty or absent @selector attribute becomes active. If there is no such &lt;xccdf:value&gt; or &lt;xccdf:complex-value&gt;, then the first &lt;xccdf:value&gt; or &lt;xccdf:complex-value&gt; listed becomes active. This reflects the fact that all &lt;xccdf:Value&gt; elements require an active value property at all times.
	Selector string `xml:"selector,attr,omitempty"`

	// Item: A single item in the list of values.
	Item []string `xml:",any"`
}

// SelChoicesType: The type of the &lt;xccdf:choice&gt; element, which specifies a list of legal or suggested choices for an &lt;xccdf:Value&gt; object.
type SelChoicesType struct {
	XMLName xml.Name

	// MustMatch: True if the listed choices are the only permissible settings for the given &lt;xccdf:Value&gt;. False if choices not specified in this &lt;xccdf:choices&gt; element are acceptable settings for this &lt;xccdf:Value&gt;.
	MustMatch bool `xml:"mustMatch,attr,omitempty"`

	// Selector: This may be referenced from &lt;xccdf:Profile&gt; selection elements or used during manual tailoring to refine the application of the &lt;xccdf:Rule&gt;. If no selectors are specified for a given &lt;xccdf:Value&gt; by &lt;xccdf:Profile&gt; elements or manual tailoring, an &lt;xccdf:choice&gt; element with an empty or non-existent @selector attribute is activated. If a selector is applied that does not match the @selector attribute of any &lt;xccdf:choices&gt; element, then no &lt;xccdf:choices&gt; element is considered activated.
	Selector string `xml:"selector,attr,omitempty"`

	// Choice: A single choice holding a simple type. (I.e., number, string, or boolean.)
	Choice []string `xml:"choice"`

	// ComplexChoice: A single choice holding a list of simple types.
	ComplexChoice []ComplexValueType `xml:"complex-choice"`
}

// SelStringType: This type is for an element that has string content and a @selector attribute for use in tailoring.
type SelStringType struct {
	XMLName xml.Name

	// Selector: This may be referenced from &lt;xccdf:Profile&gt; selection elements or used during manual tailoring to refine the application of this property. If no selectors are specified for a given property by &lt;xccdf:Profile&gt; elements or manual tailoring, properties with empty or non-existent @selector attributes are activated. If a selector is applied that does not match the @selector attribute of any of a given type of property, then no property of that type is considered activated. The only exception is the &lt;xccdf:value&gt; and &lt;xccdf:complex-value&gt; properties of an &lt;xccdf:Value&gt; element - if there is no &lt;xccdf:value&gt; or &lt;xccdf:complex-value&gt; property with a matching @selector value then the &lt;xccdf:value&gt;/&lt;xccdf:complex-value&gt; property with an empty or absent @selector attribute becomes active. If there is no such &lt;xccdf:value&gt; or &lt;xccdf:complex-value&gt;, then the first &lt;xccdf:value&gt; or &lt;xccdf:complex-value&gt; listed in the XML becomes active. This reflects the fact that all &lt;xccdf:Value&gt; elements require an active value property at all times.
	Selector string `xml:"selector,attr,omitempty"`

	Text string `xml:",chardata"`
}

// SelNumType: This type is for an element that has numeric content and a @selector attribute for use during tailoring.
type SelNumType struct {
	XMLName xml.Name

	// Selector: This may be referenced from &lt;xccdf:Profile&gt; selection elements or used during manual tailoring to refine the application of this property. If no selectors are specified for a given property by &lt;xccdf:Profile&gt; elements or manual tailoring, properties with empty or non-existent @selector attributes are activated. If a selector is applied that does not match the @selector attribute of any of a given type of property, then no property of that type considered activated.
	Selector string `xml:"selector,attr,omitempty"`

	Text string `xml:",chardata"`
}

// UriRefType: Data type for elements that have no content and a single @uri attribute.
type UriRefType struct {
	XMLName xml.Name

	// Uri: A URI.
	Uri string `xml:"uri,attr"`
}

// ProfileType: Data type for the &lt;xccdf:Profile&gt; element, which holds a specific tailoring of the &lt;xccdf:Benchmark&gt;. The main part of an &lt;xccdf:Profile&gt; is the selectors: &lt;xccdf:select&gt;, &lt;xccdf:set-value&gt;, &lt;xccdf:set-complex-value&gt;, &lt;xccdf:refine-rule&gt;, and &lt;xccdf:refine-value&gt;. An &lt;xccdf:Profile&gt; may also be signed with an XML-Signature.
type ProfileType struct {
	XMLName xml.Name

	// Id: Unique identifier for this &lt;xccdf:Profile&gt;.
	Id ProfileIdType `xml:"id,attr"`

	// ProhibitChanges: Whether or not products should prohibit changes to this &lt;xccdf:Profile&gt;.
	ProhibitChanges bool `xml:"prohibitChanges,attr,omitempty"`

	// Abstract: If true, then this &lt;xccdf:Profile&gt; exists solely to be extended by other &lt;xccdf:Profile&gt; elements.
	Abstract bool `xml:"abstract,attr,omitempty"`

	// NoteTag: Tag identifier to specify which &lt;xccdf:profile-note&gt; element from an &lt;xccdf:Rule&gt; should be associated with this &lt;xccdf:Profile&gt;.
	NoteTag string `xml:"note-tag,attr,omitempty"`

	// Extends: The id of an &lt;xccdf:Profile&gt; on which to base this &lt;xccdf:Profile&gt;.
	Extends string `xml:"extends,attr,omitempty"`

	XmlBase string `xml:"base,attr"`

	// Id2: An identifier used for referencing elements included in an XML signature.
	Id2 string `xml:"Id,attr,omitempty"`

	// Status: Status of the &lt;xccdf:Profile&gt; and date at which it attained that status. Authors may use this element to record the maturity or consensus level of an &lt;xccdf:Profile&gt;. If the &lt;xccdf:status&gt; is not given explicitly, then the &lt;xccdf:Profile&gt; is taken to have the same status as its parent &lt;xccdf:Benchmark&gt;.
	Status []Status `xml:"status"`

	// DcStatus: Holds additional status information using the Dublin Core format.
	DcStatus []DcStatusType `xml:"dc-status"`

	// Version: Version information about this &lt;xccdf:Profile&gt;.
	Version *VersionType `xml:"version"`

	// Title: Title of the &lt;xccdf:Profile&gt;.
	Title []TextWithSubType `xml:"title"`

	// Description: Text that describes the &lt;xccdf:Profile&gt;.
	Description []HtmlTextWithSubType `xml:"description"`

	// Reference: A reference where the user can learn more about the subject of this &lt;xccdf:Profile&gt;.
	Reference []ReferenceType `xml:"reference"`

	// Platform: A target platform for this &lt;xccdf:Profile&gt;.
	Platform []OverrideableCpe2IdrefType `xml:"platform"`

	// Metadata: Metadata associated with this &lt;xccdf:Profile&gt;.
	Metadata []MetadataType `xml:"metadata"`

	// Signature: A digital signature asserting authorship and allowing verification of the integrity of the &lt;xccdf:Profile&gt;.
	Signature *SignatureType `xml:"signature"`

	// Select: Select or deselect &lt;xccdf:Group&gt; and &lt;xccdf:Rule&gt; elements.
	Select []ProfileSelectType `xml:"select"`

	// SetComplexValue: Set the value of an &lt;xccdf:Value&gt; to a list.
	SetComplexValue []ProfileSetComplexValueType `xml:"set-complex-value"`

	// SetValue: Set the value of an &lt;xccdf:Value&gt; to a simple data value.
	SetValue []ProfileSetValueType `xml:"set-value"`

	// RefineValue: Customize the properties of an &lt;xccdf:Value&gt;.
	RefineValue []ProfileRefineValueType `xml:"refine-value"`

	// RefineRule: Customize the properties of an &lt;xccdf:Rule&gt; or &lt;xccdf:Group&gt;.
	RefineRule []ProfileRefineRuleType `xml:"refine-rule"`
}

// ProfileSelectType: Type for the &lt;xccdf:select&gt; element in an &lt;xccdf:Profile&gt;. This element designates an &lt;xccdf:Rule&gt;, &lt;xccdf:Group&gt;, or cluster of &lt;xccdf:Rule&gt; and &lt;xccdf:Group&gt; elements and overrides the @selected attribute on the designated items, providing a means for including or excluding &lt;xccdf:Rule&gt; elements from an assessment.
type ProfileSelectType struct {
	XMLName xml.Name

	// Idref: The @id value of an &lt;xccdf:Rule&gt; or &lt;xccdf:Group&gt;, or the @cluster-id value of one or more &lt;xccdf:Rule&gt; or &lt;xccdf:Group&gt; elements.
	Idref string `xml:"idref,attr"`

	// Selected: The new value for the indicated item's @selected property.
	Selected bool `xml:"selected,attr"`

	// Remark: Explanatory material or other prose.
	Remark []TextType `xml:",any"`
}

// ProfileSetValueType: Type for the &lt;xccdf:set-value&gt; element in an &lt;xccdf:Profile&gt;. This element upports the direct specification of simple value types such as numbers, strings, and boolean values. This overrides the &lt;xccdf:value&gt; and &lt;xccdf:complex-value&gt; element(s) of an &lt;xccdf:Value&gt; element.
type ProfileSetValueType struct {
	XMLName xml.Name

	// Idref: The @id value of an &lt;xccdf:Value&gt; or the @cluster-id value of one or more &lt;xccdf:Value&gt; elements
	Idref string `xml:"idref,attr"`

	Text string `xml:",chardata"`
}

// ProfileSetComplexValueType: Type for the &lt;xccdf:set-complex-value&gt; element in an &lt;xccdf:Profile&gt;. This element supports the direct specification of complex value types such as lists. Zero or more &lt;xccdf:item&gt; elements may appear as children of this element; if no child elements are present, this element represents an empty list. This overrides the &lt;xccdf:value&gt; and &lt;xccdf:complex-value&gt; element(s) of an &lt;xccdf:Value&gt; element.
type ProfileSetComplexValueType struct {
	XMLName xml.Name

	// Idref: The @id value of an &lt;xccdf:Value&gt; or the @cluster-id value of one or more &lt;xccdf:Value&gt; elements
	Idref string `xml:"idref,attr"`

	// Item: A single item in the list of values.
	Item []string `xml:",any"`
}

// ProfileRefineValueType: Type for the &lt;xccdf:refine-value&gt; element in an &lt;xccdf:Profile&gt;. This element designates the &lt;xccdf:Value&gt; constraints to be applied during tailoring for an &lt;xccdf:Value&gt; element or the &lt;xccdf:Value&gt; members of a cluster.
type ProfileRefineValueType struct {
	XMLName xml.Name

	// Idref: The @id value of an &lt;xccdf:Value&gt; or the @cluster-id value of one or more &lt;xccdf:Value&gt; elements
	Idref string `xml:"idref,attr"`

	// Selector: Holds a selector value corresponding to the value of a @selector property in an &lt;xccdf:Value&gt; element's child properties. Properties with a matching @selector are considered active and all other properties are inactive. This may mean that, after selector application, some classes of &lt;xccdf:Value&gt; properties will be completely inactive because none of those properties had a matching @selector. The only exception is the &lt;xccdf:value&gt; and &lt;xccdf:complex-value&gt; properties of an &lt;xccdf:Value&gt; element - if there is no &lt;xccdf:value&gt; or &lt;xccdf:complex-value&gt; property with a matching @selector value then the &lt;xccdf:value&gt;/&lt;xccdf:complex-value&gt; property with an empty or absent @selector attribute becomes active. If there is no such &lt;xccdf:value&gt; or &lt;xccdf:complex-value&gt;, then the first &lt;xccdf:value&gt; or &lt;xccdf:complex-value&gt; listed in the XML becomes active. This reflects the fact that all &lt;xccdf:Value&gt; elements require an active value property at all times.
	Selector string `xml:"selector,attr,omitempty"`

	// Operator: The new value for the identified &lt;xccdf:Value&gt; element's @operator property.
	Operator ValueOperatorType `xml:"operator,attr,omitempty"`

	// Remark: Explanatory material or other prose.
	Remark []TextType `xml:",any"`
}

// ProfileRefineRuleType: Type for the &lt;xccdf:refine-rule&gt; element in an &lt;xccdf:Profile&gt;. A &lt;xccdf:refine-rule&gt; element allows the author to select &lt;xccdf:check&gt; statements and override the @weight, @severity, and @role of an &lt;xccdf:Rule&gt;, &lt;xccdf:Group&gt;, or cluster of &lt;xccdf:Rule&gt; and &lt;xccdf:Group&gt; elements. Despite the name, this selector does apply for &lt;xccdf:Group&gt; elements and for clusters that include &lt;xccdf:Group&gt; elements, but it only affects their @weight attribute.
type ProfileRefineRuleType struct {
	XMLName xml.Name

	// Idref: The @id value of an &lt;xccdf:Rule&gt; or &lt;xccdf:Group&gt;, or the @cluster-id value of one or more &lt;xccdf:Rule&gt; or &lt;xccdf:Group&gt; elements.
	Idref string `xml:"idref,attr"`

	// Weight: The new value for the identified element's @weight property.
	Weight WeightType `xml:"weight,attr,omitempty"`

	// Selector: Holds a selector value corresponding to the value of a @selector property in an &lt;xccdf:Rule&gt; element's &lt;xccdf:check&gt; element. If the selector specified does not match any of the @selector attributes specified on any of the &lt;xccdf:check&gt; children of an &lt;xccdf:Rule&gt;, then the &lt;xccdf:check&gt; child element without a @selector attribute is used. If there is no child without a @selector attribute, then that Rule would have no effective &lt;xccdf:check&gt; element.
	Selector string `xml:"selector,attr,omitempty"`

	// Severity: The new value for the identified &lt;xccdf:Rule&gt; element's @severity property.
	Severity SeverityEnumType `xml:"severity,attr,omitempty"`

	// Role: The new value for the identified &lt;xccdf:Rule&gt; element's @role property.
	Role RoleEnumType `xml:"role,attr,omitempty"`

	// Remark: Explanatory material or other prose.
	Remark []TextType `xml:",any"`
}

// TestResultType: Data type for the &lt;xccdf:TestResult&gt; element, which holds the results of one application of the &lt;xccdf:Benchmark&gt;. The &lt;xccdf:TestResult&gt; element normally appears as the child of the &lt;xccdf:Benchmark&gt; element, although it may also appear as the top-level element of an XCCDF results document. XCCDF is not intended to be a database format for detailed results; the &lt;xccdf:TestResult&gt; element offers a way to store the results of individual tests in modest detail, with the ability to reference lower-level testing data. Although several of the child elements of this type technically support the @override attribute, the &lt;xccdf:TestResult&gt; element cannot be extended. Therefore, @override has no meaning within an &lt;xccdf:TestResult&gt; element and its children, and should not be used for them.
type TestResultType struct {
	XMLName xml.Name

	// Id: Unique identifier for this element.
	Id TestresultIdType `xml:"id,attr"`

	// StartTime: Time when testing began.
	StartTime string `xml:"start-time,attr,omitempty"`

	// EndTime: Time when testing was completed and the results recorded.
	EndTime string `xml:"end-time,attr"`

	// TestSystem: Name of the benchmark consumer program that generated this &lt;xccdf:TestResult&gt; element; should be either a CPE name or a CPE applicability language expression.
	TestSystem string `xml:"test-system,attr,omitempty"`

	// Version: The version number string copied from the &lt;xccdf:Benchmark&gt; used to direct this assessment.
	Version string `xml:"version,attr,omitempty"`

	// Id2: An identifier used for referencing elements included in an XML signature.
	Id2 string `xml:"Id,attr,omitempty"`

	// Benchmark: Reference to the &lt;xccdf:Benchmark&gt; for which the &lt;xccdf:TestResult&gt; records results. This property is required if this &lt;xccdf:TestResult&gt; element is the top-level element and optional otherwise.
	Benchmark *BenchmarkReferenceType `xml:"benchmark"`

	// TailoringFile: The tailoring file element contains attributes used to identify an &lt;xccdf:Tailoring&gt; element used to guide the assessment reported on in this &lt;xccdf:TestResult&gt;. The tailoring element is required in an &lt;xccdf:TestResult&gt; if and only if an &lt;xccdf:Tailoring&gt; element guided the assessment recorded in the &lt;xccdf:TestResult&gt; or if the &lt;xccdf:Tailoring&gt; element records manual tailoring actions applied to this assessment.
	TailoringFile *TailoringReferenceType `xml:"tailoring-file"`

	// Title: Title of the test.
	Title []TextType `xml:"title"`

	// Remark: A remark about the test, possibly supplied by the person administering the &lt;xccdf:Benchmark&gt; assessment
	Remark []TextType `xml:"remark"`

	// Organization: The name of the organization or other entity responsible for applying this &lt;xccdf:Benchmark&gt; and generating this result. When multiple &lt;xccdf:organization&gt; elements are used to indicate multiple organization names in a hierarchical organization, the highest-level organization should appear first.
	Organization []string `xml:"organization"`

	// Identity: Information about the system identity or user employed during application of the &lt;xccdf:Benchmark&gt;. If used, specifies the name of the authenticated identity.
	Identity *IdentityType `xml:"identity"`

	// Profile: The &lt;xccdf:profile&gt; element holds the value of the @id attribute value of the &lt;xccdf:Profile&gt; selected to be used in the assessment reported on by this &lt;xccdf:TestResult&gt;. This &lt;xccdf:Profile&gt; might be from the &lt;xccdf:Benchmark&gt; or from an &lt;xccdf:Tailoring&gt; file, if used. This element should appear if and only if an &lt;xccdf:Profile&gt; was selected to guide the assessment.
	Profile *IdrefType `xml:"profile"`

	// Target: Name or description of the target system whose test results are recorded in the &lt;xccdf:TestResult&gt; element (the system to which an &lt;xccdf:Benchmark&gt; test was applied). Each appearance of the element supplies a name by which the target host or device was identified at the time the test was run. The name may be any string, but applications should include the fully qualified DNS name whenever possible.
	Target []string `xml:"target"`

	// TargetAddress: Network address of the target system to which an &lt;xccdf:Benchmark&gt; test was applied. Typical forms for the address include IP version 4 (IPv4), IP version 6 (IPv6), and Ethernet media access control (MAC).
	TargetAddress []string `xml:"target-address"`

	// TargetFacts: A list of named facts about the target system or platform.
	TargetFacts *TargetFactsType `xml:"target-facts"`

	// Platform: A platform on the target system. There should be one instance of this property for every platform that the target system was found to meet.
	Platform []Cpe2IdrefType `xml:"platform"`

	// RuleResult: The result of a single instance of an &lt;xccdf:Rule&gt; application against the target. The &lt;xccdf:TestResult&gt; must include at least one &lt;xccdf:rule-result&gt; record for each &lt;xccdf:Rule&gt; that was selected in the resolved &lt;xccdf:Benchmark&gt;.
	RuleResult []RuleResultType `xml:"rule-result"`

	// Score: An overall score for this &lt;xccdf:Benchmark&gt; test.
	Score []ScoreType `xml:"score"`

	// Metadata: XML metadata associated with this &lt;xccdf:TestResult&gt;.
	Metadata []MetadataType `xml:"metadata"`

	// Signature: A digital signature asserting authorship and allowing verification of the integrity of the &lt;xccdf:TestResult&gt;.
	Signature *SignatureType `xml:"signature"`

	// TargetIdRef: References to external structures with identifying information about the target of this assessment.
	TargetIdRef []TargetIdRefType `xml:"target-id-ref"`

	// SetValue: Specific setting for a single &lt;xccdf:Value&gt; element used during the test.
	SetValue []ProfileSetValueType `xml:"set-value"`

	// SetComplexValue: Specific setting for a single &lt;xccdf:Value&gt; element used during the test when the given value is set to a complex type, such as a list.
	SetComplexValue []ProfileSetComplexValueType `xml:"set-complex-value"`
}

// BenchmarkReferenceType: Type for a reference to the &lt;xccdf:Benchmark&gt; document.
type BenchmarkReferenceType struct {
	XMLName xml.Name

	// Href: The URI of the &lt;xccdf:Benchmark&gt; document.
	Href string `xml:"href,attr"`

	// Id: The value of that &lt;xccdf:Benchmark&gt; element's @id attribute.
	Id string `xml:"id,attr,omitempty"`
}

// ScoreType: Type for a score value in an &lt;xccdf:TestResult&gt;.
type ScoreType struct {
	XMLName xml.Name

	// System: A URI indicating the scoring model used to create this score.
	System string `xml:"system,attr,omitempty"`

	// Maximum: The maximum possible score value that could have been achieved under the named scoring system.
	Maximum float64 `xml:"maximum,attr,omitempty"`

	Text string `xml:",chardata"`
}

// TargetFactsType: Data type for the &lt;xccdf:target-facts&gt; elements in &lt;xccdf:TestResult&gt; elements. A &lt;xccdf:target-facts&gt; element holds a list of named facts about the target system or platform. Each fact is an element of type factType. Each &lt;xccdf:fact&gt; must have a name, but duplicate names are allowed. (For example, if you had a fact about MAC addresses, and the target system had three NICs, then you'd need three instances of the "urn:xccdf:fact:ethernet:MAC" fact.)
type TargetFactsType struct {
	XMLName xml.Name

	// Fact: A named fact about the target system or platform.
	Fact []FactType `xml:",any"`
}

// TargetIdRefType: Type for an &lt;xccdf:target-id-ref&gt; element in an &lt;xccdf:TestResult&gt; element. This element contains references to external structures with identifying information about the target of an assessment.
type TargetIdRefType struct {
	XMLName xml.Name

	// System: Indicates the language in which this identifying information is expressed. If the identifying language uses XML namespaces, then the @system attribute for the language should be its namespace.
	System string `xml:"system,attr"`

	// Href: Points to the external resource (e.g., a file) that contains the identifying information.
	Href string `xml:"href,attr"`

	// Name: Identifies a specific structure within the referenced file. If the @name attribute is absent, the reference is to the entire resource indicated in the @href attribute.
	Name string `xml:"name,attr,omitempty"`
}

// IdentityType: Type for an &lt;xccdf:identity&gt; element in an &lt;xccdf:TestResult&gt;. It contains information about the system identity or user employed during application of the &lt;xccdf:Benchmark&gt;. If used, shall specify the name of the authenticated identity.
type IdentityType struct {
	XMLName xml.Name

	// Authenticated: Whether the identity was authenticated with the target system during the application of the &lt;xccdf:Benchmark&gt;.
	Authenticated bool `xml:"authenticated,attr"`

	// Privileged: Whether the identity was granted administrative or other special privileges beyond those of a normal user.
	Privileged bool `xml:"privileged,attr"`

	Text string `xml:",chardata"`
}

// FactType: Data type for an &lt;xccdf:fact&gt; element, which holds information about a target system: a name-value pair with a type. The content of the element is the value, and the @name attribute indicates the name. The @name is in the form of a URI that indicates the nature of the fact. A table of defined fact URIs appears in section 6.6.3 of the XCCDF specification. Additional URIs may be defined by authors to indicate additional kinds of facts.
type FactType struct {
	XMLName xml.Name

	// Name: A URI that indicates the name of the fact.
	Name string `xml:"name,attr"`

	// Type: The data type of the fact value.
	Type ValueTypeType `xml:"type,attr,omitempty"`

	Text string `xml:",chardata"`
}

// TailoringReferenceType: Type for the &lt;xccdf:tailoring&gt; element within an &lt;xccdf:TestResult&gt;. This element is used to indicate the identity and location of an &lt;xccdf:Tailoring&gt; file that was used to create the assessment results.
type TailoringReferenceType struct {
	XMLName xml.Name

	// Href: The URI of the &lt;xccdf:Tailoring&gt; file's location.
	Href string `xml:"href,attr"`

	// Id: The &lt;xccdf:Tailoring&gt; element's @id value.
	Id string `xml:"id,attr"`

	// Version: The value of the &lt;xccdf:Tailoring&gt; element's &lt;xccdf:version&gt; property.
	Version string `xml:"version,attr"`

	// Time: The value of the @time attribute in the &lt;xccdf:Tailoring&gt; element's &lt;xccdf:version&gt; property.
	Time string `xml:"time,attr"`
}

// RuleResultType: Type for the &lt;xccdf:rule-result&gt; element within an &lt;xccdf:TestResult&gt;. An &lt;xccdf:rule-result&gt; holds the result of applying an &lt;xccdf:Rule&gt; from the &lt;xccdf:Benchmark&gt; to a target system or component of a target system.
type RuleResultType struct {
	XMLName xml.Name

	// Idref: The value of the @id property of an &lt;xccdf:Rule&gt;. This &lt;xccdf:rule-result&gt; reflects the result of applying this &lt;xccdf:Rule&gt; to a target or target component.
	Idref string `xml:"idref,attr"`

	// Role: The value of the @role property of the referenced &lt;xccdf:Rule&gt;.
	Role RoleEnumType `xml:"role,attr,omitempty"`

	// Severity: The value of the @severity property of the referenced &lt;xccdf:Rule&gt;.
	Severity SeverityEnumType `xml:"severity,attr,omitempty"`

	// Time: Time when application of this instance of the referenced &lt;xccdf:Rule&gt; was completed.
	Time string `xml:"time,attr,omitempty"`

	// Version: The value of the @version property of the referenced &lt;xccdf:Rule&gt;.
	Version string `xml:"version,attr,omitempty"`

	// Weight: The value of the @weight property of the referenced &lt;xccdf:Rule&gt;.
	Weight WeightType `xml:"weight,attr,omitempty"`

	// Result: Result of applying the referenced &lt;xccdf:Rule&gt; to a target or target component. (E.g., Pass, Fail, etc.)
	Result ResultEnumType `xml:"result"`

	// Override: An XML block explaining how and why an auditor chose to override the result.
	Override []OverrideType `xml:"override"`

	// Ident: A long-term globally meaningful identifier for the issue, vulnerability, platform, etc. copied from the referenced &lt;xccdf:Rule&gt;.
	Ident []IdentType `xml:"ident"`

	// Metadata: XML metadata associated with this &lt;xccdf:rule-result&gt;.
	Metadata []MetadataType `xml:"metadata"`

	// Message: Diagnostic messages from the checking engine. These elements do not affect scoring; they are present merely to convey diagnostic information from the checking engine.
	Message []MessageType `xml:"message"`

	// Instance: Name of the target subsystem or component to which this result applies, for a multiply instantiated &lt;xccdf:Rule&gt;. The element is important for an &lt;xccdf:Rule&gt; that applies to components of the target system, especially when a target might have several such components, and where the @multiple attribute of the &lt;xccdf:Rule&gt; is set to true.
	Instance []InstanceResultType `xml:"instance"`

	// Fix: Fix script for this target platform, if available (would normally appear only for result values of “fail”). It is assumed to have been ‘instantiated’ by the testing tool and any substitutions or platform selections already made.
	Fix []FixType `xml:"fix"`

	// Check: Encapsulated or referenced results to detailed testing output from the checking engine (if any).
	Check []CheckType `xml:"check"`

	// ComplexCheck: A copy of the &lt;xccdf:Rule&gt; element’s &lt;xccdf:complex-check&gt; element where each component &lt;xccdf:check&gt; element of the &lt;xccdf:complex-check&gt; element is an encapsulated or referenced results to detailed testing output from the checking engine (if any) as described in the &lt;xccdf:rule-result&gt; &lt;xccdf:check&gt; property.
	ComplexCheck *ComplexCheckType `xml:"complex-check"`
}

// InstanceResultType: Type for an &lt;xccdf:instance&gt; element in an &lt;xccdf:rule-result&gt;. The content is a string, but the element may also have two attributes: @context and @parentContext. Both attributes are intended to provide hints as to the nature of the substituted content. This body of this type records the details of the target system instance for multiply instantiated &lt;xccdf:Rule&gt; elements.
type InstanceResultType struct {
	XMLName xml.Name

	// Context: Describes the scope or significance of the instance content.
	Context string `xml:"context,attr,omitempty"`

	// ParentContext: Used to express nested structure in instance context structures.
	ParentContext string `xml:"parentContext,attr,omitempty"`

	Text string `xml:",chardata"`
}

// OverrideType: Type for an &lt;xccdf:override&gt; element in an &lt;xccdf:rule-result&gt;. This element is used to record manual modification or annotation of a particular &lt;xccdf:rule-result&gt;. All attributes and child elements are required. It will not always be the case that the &lt;xccdf:new-result&gt; value will differ from the &lt;xccdf:old-result&gt; value. They might match if an authority wished to make a remark on the result without changing it. If &lt;xccdf:new-result&gt; and &lt;xccdf:old-result&gt; differ, the &lt;xccdf:result&gt; element of the enclosing &lt;xccdf:rule-result&gt; must match the &lt;xccdf:new-result&gt; value.
type OverrideType struct {
	XMLName xml.Name

	// Time: When the override was applied.
	Time string `xml:"time,attr"`

	// Authority: Name or other identification for the human principal authorizing the override.
	Authority string `xml:"authority,attr"`

	// OldResult: The &lt;xccdf:rule-result&gt; status before this override.
	OldResult ResultEnumType `xml:"old-result"`

	// NewResult: The new, override &lt;xccdf:rule-result&gt; status.
	NewResult ResultEnumType `xml:"new-result"`

	// Remark: Rationale or explanation text for why or how the override was applied.
	Remark TextType `xml:"remark"`
}

// MessageType: Type for a message generated by the checking engine or XCCDF tool during &lt;xccdf:Benchmark&gt; testing. The message is contained in string format in the body of the element.
type MessageType struct {
	XMLName xml.Name

	// Severity: Denotes the seriousness of the message.
	Severity MsgSevEnumType `xml:"severity,attr"`

	Text string `xml:",chardata"`
}

// TailoringType: Data type for the &lt;xccdf:Tailoring&gt; element. The &lt;xccdf:Tailoring&gt; element allows named tailorings (i.e., &lt;xccdf:Profile&gt; elements) of an &lt;xccdf:Benchmark&gt; to be defined separately from the &lt;xccdf:Benchmark&gt; itself. The &lt;xccdf:Profile&gt; elements in an &lt;xccdf:Tailoring&gt; element can be used in two ways: First, an organization might wish to pre-define a set of tailoring actions to be applied on top of or instead of the tailoring performed by an &lt;xccdf:Benchmark&gt; element's &lt;xccdf:Profile&gt; elements. Second, an &lt;xccdf:Tailoring&gt; element can be used to record manual tailoring actions performed during the course of an assessment.
type TailoringType struct {
	XMLName xml.Name

	// Id: Unique identifier for this element.
	Id TailoringIdType `xml:"id,attr"`

	// Id2: An identifier used for referencing elements included in an XML signature.
	Id2 string `xml:"Id,attr,omitempty"`

	// Benchmark: Identifies the &lt;xccdf:Benchmark&gt; to which this tailoring applies. A &lt;xccdf:Tailoring&gt; document is only applicable to a single &lt;xccdf:Benchmark&gt;. Note, however, that this is a purely informative field.
	Benchmark *TailoringBenchmarkReferenceType `xml:"benchmark"`

	// Status: Status of the tailoring and date at which it attained that status. Authors may use this element to record the maturity or consensus level of an &lt;xccdf:Tailoring&gt; element.
	Status []Status `xml:"status"`

	// DcStatus: Holds additional status information using the Dublin Core format.
	DcStatus []DcStatusType `xml:"dc-status"`

	// Version: The version of this &lt;xccdf:Tailoring&gt; element, with a required @time attribute that records when the &lt;xccdf:Tailoring&gt; element was created. This timestamp is necessary because, under some circumstances, a copy of an &lt;xccdf:Tailoring&gt; document might be automatically generated. Without the version and timestamp, tracking of these automatically created &lt;xccdf:Tailoring&gt; documents could become problematic.
	Version TailoringVersionType `xml:"version"`

	// Metadata: XML metadata for the &lt;xccdf:Tailoring&gt; element.
	Metadata []MetadataType `xml:"metadata"`

	// Profile: &lt;xccdf:Profile&gt; elements that reference and customize sets of items in an &lt;xccdf:Benchmark&gt;.
	Profile []ProfileType `xml:"Profile"`

	// Signature: A digital signature asserting authorship and allowing verification of the integrity of the &lt;xccdf:Tailoring&gt;.
	Signature *SignatureType `xml:"signature"`
}

// TailoringBenchmarkReferenceType: Identifies the &lt;xccdf:Benchmark&gt; to which an &lt;xccdf:Tailoring&gt; element applies.
type TailoringBenchmarkReferenceType struct {
	XMLName xml.Name

	// Version: Identifies the version of the referenced &lt;xccdf:Benchmark&gt;.
	Version string `xml:"version,attr,omitempty"`

	// Href: The URI of the &lt;xccdf:Benchmark&gt; document.
	Href string `xml:"href,attr"`

	// Id: The value of that &lt;xccdf:Benchmark&gt; element's @id attribute.
	Id string `xml:"id,attr,omitempty"`
}

// TailoringVersionType: Type for version information about an &lt;xccdf:Tailoring&gt; element.
type TailoringVersionType struct {
	XMLName xml.Name

	// Time: The time when this version of the &lt;xccdf:Tailoring&gt; document was completed.
	Time string `xml:"time,attr"`

	Text string `xml:",chardata"`
}

// XSD SimpleType declarations

// StatusType: The statusType represents the possible levels of maturity or consensus level for its parent element as recorded by an &lt;xccdf:status&gt; element.
type StatusType string

const StatusTypeAccepted StatusType = "accepted"

const StatusTypeDeprecated StatusType = "deprecated"

const StatusTypeDraft StatusType = "draft"

const StatusTypeIncomplete StatusType = "incomplete"

const StatusTypeInterim StatusType = "interim"

// BenchmarkIdType: The format required for the @id property of &lt;xccdf:Benchmark&gt; elements. xccdf_N_benchmark_S, where N is a reverse-DNS style namespace and S is an NCName-compatible string.
type BenchmarkIdType string

// RuleIdType: The format required for the @id property of &lt;xccdf:Rule&gt; elements. xccdf_N_rule_S, where N is a reverse-DNS style namespace and S is an NCName-compatible string.
type RuleIdType string

// GroupIdType: The format required for the @id property of &lt;xccdf:Group&gt; elements. xccdf_N_group_S, where N is a reverse-DNS style namespace and S is an NCName-compatible string.
type GroupIdType string

// ValueIdType: The format required for the @id property of &lt;xccdf:Value&gt; elements. xccdf_N_value_S, where N is a reverse-DNS style namespace and S is an NCName-compatible string.
type ValueIdType string

// ProfileIdType: The format required for the @id property of &lt;xccdf:Profile&gt; elements. xccdf_N_profile_S, where N is a reverse-DNS style namespace and S is an NCName-compatible string.
type ProfileIdType string

// TestresultIdType: The format required for the @id property of &lt;xccdf:TestResult&gt; elements. xccdf_N_testresult_S, where N is a reverse-DNS style namespace and S is an NCName-compatible string.
type TestresultIdType string

// TailoringIdType: The format required for the @id property of &lt;xccdf:Tailoring&gt; elements. xccdf_N_tailoring_S, where N is a reverse-DNS style namespace and S is an NCName-compatible string.
type TailoringIdType string

// WarningCategoryEnumType: Allowed warning category keywords for the &lt;xccdf:warning&gt; element used in &lt;xccdf:Rule&gt; elements.
type WarningCategoryEnumType string

const WarningCategoryEnumTypeGeneral WarningCategoryEnumType = "general"

const WarningCategoryEnumTypeFunctionality WarningCategoryEnumType = "functionality"

const WarningCategoryEnumTypePerformance WarningCategoryEnumType = "performance"

const WarningCategoryEnumTypeHardware WarningCategoryEnumType = "hardware"

const WarningCategoryEnumTypeLegal WarningCategoryEnumType = "legal"

const WarningCategoryEnumTypeRegulatory WarningCategoryEnumType = "regulatory"

const WarningCategoryEnumTypeManagement WarningCategoryEnumType = "management"

const WarningCategoryEnumTypeAudit WarningCategoryEnumType = "audit"

const WarningCategoryEnumTypeDependency WarningCategoryEnumType = "dependency"

// FixStrategyEnumType: Allowed @strategy keyword values for an &lt;xccdf:Rule&gt; element's &lt;xccdf:fix&gt; or &lt;xccdf:fixtext&gt; elements. The values indicate the method or approach for fixing non-compliance with a particular &lt;xccdf:Rule&gt;.
type FixStrategyEnumType string

const FixStrategyEnumTypeUnknown FixStrategyEnumType = "unknown"

const FixStrategyEnumTypeConfigure FixStrategyEnumType = "configure"

const FixStrategyEnumTypeCombination FixStrategyEnumType = "combination"

const FixStrategyEnumTypeDisable FixStrategyEnumType = "disable"

const FixStrategyEnumTypeEnable FixStrategyEnumType = "enable"

const FixStrategyEnumTypePatch FixStrategyEnumType = "patch"

const FixStrategyEnumTypePolicy FixStrategyEnumType = "policy"

const FixStrategyEnumTypeRestrict FixStrategyEnumType = "restrict"

const FixStrategyEnumTypeUpdate FixStrategyEnumType = "update"

// RatingEnumType: This type enumerates allowed rating values the disruption and complexity properties of an &lt;xccdf:Rule&gt; element's &lt;xccdf:fix&gt; or &lt;xccdf:fixtext&gt; elements.
type RatingEnumType string

const RatingEnumTypeUnknown RatingEnumType = "unknown"

const RatingEnumTypeLow RatingEnumType = "low"

const RatingEnumTypeMedium RatingEnumType = "medium"

const RatingEnumTypeHigh RatingEnumType = "high"

// CcOperatorEnumType: The type for the allowed @operator names for the &lt;xccdf:complex-check&gt; operator attribute. Only AND and OR operators are supported. (The &lt;xccdf:complex-check&gt; has a separate mechanism for negation.)
type CcOperatorEnumType string

const CcOperatorEnumTypeOr CcOperatorEnumType = "OR"

const CcOperatorEnumTypeAnd CcOperatorEnumType = "AND"

// WeightType: Data type for an &lt;xccdf:Rule&gt; element's weight, a non-negative real number.
type WeightType float64

// ValueTypeType: Allowed data types for &lt;xccdf:Value&gt; elements, string, numeric, and boolean. A tool may choose any convenient form to store an &lt;xccdf:Value&gt; element’s &lt;xccdf:value&gt; element, but the @type conveys how the value should be treated for user input validation purposes during tailoring processing. The @type may also be used to give additional guidance to the user or to validate the user’s input. For example, if an &lt;xccdf:value&gt; element’s @type attribute is “number”, then a tool might choose to reject user tailoring input that is not composed of digits. In the case of a list of values, the @type applies to all elements of the list individually. Note that checking systems may have their own understanding of data types that may not be identical to the typing indicated in XCCDF
type ValueTypeType string

const ValueTypeTypeNumber ValueTypeType = "number"

const ValueTypeTypeString ValueTypeType = "string"

const ValueTypeTypeBoolean ValueTypeType = "boolean"

// ValueOperatorType: This type enumerates allowed values of the @operator property of &lt;xccdf:Value&gt; elements. The specific interpretation of these operators depends on the checking system used.
type ValueOperatorType string

const ValueOperatorTypeEquals ValueOperatorType = "equals"

const ValueOperatorTypeNotEqual ValueOperatorType = "not equal"

const ValueOperatorTypeGreaterThan ValueOperatorType = "greater than"

const ValueOperatorTypeLessThan ValueOperatorType = "less than"

const ValueOperatorTypeGreaterThanOrEqual ValueOperatorType = "greater than or equal"

const ValueOperatorTypeLessThanOrEqual ValueOperatorType = "less than or equal"

const ValueOperatorTypePatternMatch ValueOperatorType = "pattern match"

// InterfaceHintType: Allowed interface hint values. &lt;xccdf:Value&gt; elements may contain a hint or recommendation to a benchmark consumer or producer about how the user might select or adjust the &lt;xccdf:Value&gt;. This type enumerates the possible values of this hint.
type InterfaceHintType string

const InterfaceHintTypeChoice InterfaceHintType = "choice"

const InterfaceHintTypeTextline InterfaceHintType = "textline"

const InterfaceHintTypeText InterfaceHintType = "text"

const InterfaceHintTypeDate InterfaceHintType = "date"

const InterfaceHintTypeDatetime InterfaceHintType = "datetime"

// MsgSevEnumType: Allowed values to indicate the severity of messages from the checking engine. These values don't affect scoring themselves but are present merely to convey diagnostic information from the checking engine. Benchmark consumers may choose to log these messages or display them to the user.
type MsgSevEnumType string

const MsgSevEnumTypeError MsgSevEnumType = "error"

const MsgSevEnumTypeWarning MsgSevEnumType = "warning"

const MsgSevEnumTypeInfo MsgSevEnumType = "info"

// ResultEnumType: Allowed result indicators for a test.
type ResultEnumType string

const ResultEnumTypePass ResultEnumType = "pass"

const ResultEnumTypeFail ResultEnumType = "fail"

const ResultEnumTypeError ResultEnumType = "error"

const ResultEnumTypeUnknown ResultEnumType = "unknown"

const ResultEnumTypeNotapplicable ResultEnumType = "notapplicable"

const ResultEnumTypeNotchecked ResultEnumType = "notchecked"

const ResultEnumTypeNotselected ResultEnumType = "notselected"

const ResultEnumTypeInformational ResultEnumType = "informational"

const ResultEnumTypeFixed ResultEnumType = "fixed"

// SeverityEnumType: Allowed severity values for the @severity attribute of an &lt;xccdf:Rule&gt;. The value of this attribute provides an indication of the importance of the &lt;xccdf:Rule&gt; element's recommendation. This information is informative only and does not affect scoring.
type SeverityEnumType string

const SeverityEnumTypeUnknown SeverityEnumType = "unknown"

const SeverityEnumTypeInfo SeverityEnumType = "info"

const SeverityEnumTypeLow SeverityEnumType = "low"

const SeverityEnumTypeMedium SeverityEnumType = "medium"

const SeverityEnumTypeHigh SeverityEnumType = "high"

// RoleEnumType: Allowed checking and scoring roles for an &lt;xccdf:Rule&gt;.
type RoleEnumType string

const RoleEnumTypeFull RoleEnumType = "full"

const RoleEnumTypeUnscored RoleEnumType = "unscored"

const RoleEnumTypeUnchecked RoleEnumType = "unchecked"

// SubUseEnumType: This holds the possible values of the @use attribute within an &lt;xccdf:sub&gt; element. The @use attribute is only applicable with the subType's @idref attribute holds the value of the @id of an &lt;xccdf:Value&gt; element.
type SubUseEnumType string

const SubUseEnumTypeValue SubUseEnumType = "value"

const SubUseEnumTypeTitle SubUseEnumType = "title"

const SubUseEnumTypeLegacy SubUseEnumType = "legacy"
