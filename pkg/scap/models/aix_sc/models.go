// Code generated by https://github.com/gocomply/xsd2go; DO NOT EDIT.
// Models for http://oval.mitre.org/XMLSchema/oval-system-characteristics-5#aix
package aix_sc

import (
	"encoding/xml"
	"github.com/gocomply/scap/pkg/scap/models/oval"
	"github.com/gocomply/scap/pkg/scap/models/oval_sc"
)

// The following is a description of the elements, types, and attributes that compose the AIX specific system characteristic items found in Open Vulnerability and Assessment Language (OVAL). Each item is an extension of the standard test element defined in the Core Definition Schema. Through extension, each test inherits a set of elements and attributes that are shared amongst all OVAL tests. Each test is described in detail and should provide the information necessary to understand what each element and attribute represents. This document is intended for developers and assumes some familiarity with XML. A high level description of the interaction between the different tests and their relationship to the Core Definition Schema is not outlined here.

// InterimFixItem: From emgr -l -u VUID Command. See instfix manpage for specific fields.
type InterimFixItem struct {
	XMLName xml.Name `xml:"interim_fix_item"`

	Id oval.ItemIdpattern `xml:"id,attr"`

	Status oval_sc.StatusEnumeration `xml:"status,attr,omitempty"`

	// Vuid: Virtually Unique ID. A combination of time and cpuid, this ID can be used to differentiate fixes that are otherwise identical.
	Vuid *oval_sc.EntityItemStringType `xml:"vuid"`

	// Label: Each efix that is installed on a given system has a unique efix label.
	Label *oval_sc.EntityItemStringType `xml:"label"`

	// Abstract: Describes the efix package.
	Abstract *oval_sc.EntityItemStringType `xml:"abstract"`

	// State: The the emergency fix state.
	State *EntityItemInterimFixStateType `xml:"state"`

	Message []oval.MessageType `xml:"message"`
}

// FilesetItem: Output of /usr/bin/lslpp -l FilesetName. See lslpp manpage for specific fields.
type FilesetItem struct {
	XMLName xml.Name `xml:"fileset_item"`

	Id oval.ItemIdpattern `xml:"id,attr"`

	Status oval_sc.StatusEnumeration `xml:"status,attr,omitempty"`

	// Flstinst: Represents the name of the fileset being checked.
	Flstinst *oval_sc.EntityItemStringType `xml:"flstinst"`

	// Level: Maintenance level (also known as version in Solaris or Linux) of the fileset. For example, "5.3.0.10" is the level for 'bos.txt.tfs' fileset in one AIX machine.
	Level *oval_sc.EntityItemVersionType `xml:"level"`

	// State: This gives the state of the fileset being checked. The state can be 'APPLIED', 'APPLYING','BROKEN', 'COMMITTED', 'EFIX LOCKED', 'OBSOLETE', 'COMMITTING','REJECTING'. See the manpage of the 'lslpp' command more information.
	State *EntityItemFilesetStateType `xml:"state"`

	// Description: Short description of the fileset being checked.
	Description *oval_sc.EntityItemStringType `xml:"description"`

	Message []oval.MessageType `xml:"message"`
}

// FixItem: From /usr/sbin/instfix -iavk APARNum Command. See instfix manpage for specific fields.
type FixItem struct {
	XMLName xml.Name `xml:"fix_item"`

	Id oval.ItemIdpattern `xml:"id,attr"`

	Status oval_sc.StatusEnumeration `xml:"status,attr,omitempty"`

	// AparNumber: APAR is the short for 'Authorized Program Analysis Report'. APAR identifies and describes a software product defect. An APAR number can obtain a PTF (Program Temporary Fix) for the defect, if a PTF is available. An example of an apar_number is 'IY78751', it includes two alphabetic characters and a 5-digit integer.
	AparNumber *oval_sc.EntityItemStringType `xml:"apar_number"`

	// Abstract: The abstract of the APAR being checked. For instance, 'LL syas rXct are available even when not susea' is the abstract of APAR 'IY78751'.
	Abstract *oval_sc.EntityItemStringType `xml:"abstract"`

	// Symptom: The symptom text related to the APAR being checked. For example, the symptom text for 'IY75211' is 'Daylight savings change for year 2007 and beyond'.
	Symptom *oval_sc.EntityItemStringType `xml:"symptom"`

	// InstallationStatus: The installation status of files associated with the APAR.
	InstallationStatus *EntityItemFixInstallationStatusType `xml:"installation_status"`

	Message []oval.MessageType `xml:"message"`
}

// NoItem: The no_item is used to hold information related to the /usr/sbin/no command and the tunable parameters it manages. Currently, /usr/sbin/no is used to configure network tuning parameters. The /usr/sbin/no command sets or displays current or next boot values for network tuning parameters. The /usr/sbin/no command queries the named parameter, retrieves the value associated with the specified parameter, and displays it.
type NoItem struct {
	XMLName xml.Name `xml:"no_item"`

	Id oval.ItemIdpattern `xml:"id,attr"`

	Status oval_sc.StatusEnumeration `xml:"status,attr,omitempty"`

	// Tunable: The name of the target parameter to be queried by the /usr/sbin/no command. Examples include ip_forwarding and tcp_keepalive_interval.
	Tunable *oval_sc.EntityItemStringType `xml:"tunable"`

	// Value: The value entity defines the value assigned to the tunable parameter being examined.
	Value *oval_sc.EntityItemAnySimpleType `xml:"value"`

	Message []oval.MessageType `xml:"message"`
}

// OslevelItem: Information about the release and maintenance level of AIX operating system. This information can be retrieved by the /usr/bin/oslevel -r command.
type OslevelItem struct {
	XMLName xml.Name `xml:"oslevel_item"`

	Id oval.ItemIdpattern `xml:"id,attr"`

	Status oval_sc.StatusEnumeration `xml:"status,attr,omitempty"`

	// MaintenanceLevel: This is the maintenance level (system version) of current AIX operating system.
	MaintenanceLevel *oval_sc.EntityItemVersionType `xml:"maintenance_level"`

	Message []oval.MessageType `xml:"message"`
}

// XSD ComplexType declarations

// EntityItemFilesetStateType: The EntityStateFilesetStateType complex type defines the different values that are valid for the state entity of a fileset state. The empty string value is permitted here to allow for detailed error reporting.
type EntityItemFilesetStateType struct {
	XMLName xml.Name

	// Datatype: The optional datatype attribute determines the type of data expected (the default datatype is 'string'). Note that the datatype attribute simply defines the type of data as found on the system, it is not used during evaluation. An OVAL Definition defines how the data should be interpreted during analysis. If the definition states a datatype that is different than what the system characteristics presents, then a type cast must be made.
	Datatype oval.DatatypeEnumeration `xml:"datatype,attr,omitempty"`

	// Mask: The optional mask attribute is used to identify values that have been hidden for sensitivity concerns. This is used by the Result document which uses the System Characteristics schema to format the information found on a specific system. When the mask attribute is set to 'true' on an OVAL Entity or an OVAL Field, the corresponding collected value of that OVAL Entity or OVAL Field MUST NOT be present in the "results" section of the OVAL Results document; the "oval_definitions" section must not be altered and must be an exact copy of the definitions evaluated. Values MUST NOT be masked in OVAL System Characteristics documents that are not contained within an OVAL Results document. It is possible for masking conflicts to occur where one entity has mask set to true and another entity has mask set to false. A conflict will occur when the mask attribute is set differently on an OVAL Object and matching OVAL State or when more than one OVAL Objects identify the same OVAL Item(s). When such a conflict occurs the result is always to mask the entity.
	Mask bool `xml:"mask,attr,omitempty"`

	// Status: The optional status attribute holds information regarding the success of the data collection. For example, if there was an error collecting a particular piece of data, then the status would be 'error'.
	Status oval_sc.StatusEnumeration `xml:"status,attr,omitempty"`
}

// EntityItemFixInstallationStatusType: The EntityStateFixInstallationStatusType defines the different values that are valid for the installation_status entity of a fix_state item. The empty string is also allowed as a valid value to support empty emlements associated with error conditions.
type EntityItemFixInstallationStatusType struct {
	XMLName xml.Name

	// Datatype: The optional datatype attribute determines the type of data expected (the default datatype is 'string'). Note that the datatype attribute simply defines the type of data as found on the system, it is not used during evaluation. An OVAL Definition defines how the data should be interpreted during analysis. If the definition states a datatype that is different than what the system characteristics presents, then a type cast must be made.
	Datatype oval.DatatypeEnumeration `xml:"datatype,attr,omitempty"`

	// Mask: The optional mask attribute is used to identify values that have been hidden for sensitivity concerns. This is used by the Result document which uses the System Characteristics schema to format the information found on a specific system. When the mask attribute is set to 'true' on an OVAL Entity or an OVAL Field, the corresponding collected value of that OVAL Entity or OVAL Field MUST NOT be present in the "results" section of the OVAL Results document; the "oval_definitions" section must not be altered and must be an exact copy of the definitions evaluated. Values MUST NOT be masked in OVAL System Characteristics documents that are not contained within an OVAL Results document. It is possible for masking conflicts to occur where one entity has mask set to true and another entity has mask set to false. A conflict will occur when the mask attribute is set differently on an OVAL Object and matching OVAL State or when more than one OVAL Objects identify the same OVAL Item(s). When such a conflict occurs the result is always to mask the entity.
	Mask bool `xml:"mask,attr,omitempty"`

	// Status: The optional status attribute holds information regarding the success of the data collection. For example, if there was an error collecting a particular piece of data, then the status would be 'error'.
	Status oval_sc.StatusEnumeration `xml:"status,attr,omitempty"`
}

// EntityItemInterimFixStateType: The EntityItemInterimFixStateType complex type defines the different values that are valid for the state entity of a interim_fix_state state. Please refer to the AIX documentation of Emergency Fix States. The empty string value is permitted here to allow for detailed error reporting.
type EntityItemInterimFixStateType struct {
	XMLName xml.Name

	// Datatype: The optional datatype attribute determines the type of data expected (the default datatype is 'string'). Note that the datatype attribute simply defines the type of data as found on the system, it is not used during evaluation. An OVAL Definition defines how the data should be interpreted during analysis. If the definition states a datatype that is different than what the system characteristics presents, then a type cast must be made.
	Datatype oval.DatatypeEnumeration `xml:"datatype,attr,omitempty"`

	// Mask: The optional mask attribute is used to identify values that have been hidden for sensitivity concerns. This is used by the Result document which uses the System Characteristics schema to format the information found on a specific system. When the mask attribute is set to 'true' on an OVAL Entity or an OVAL Field, the corresponding collected value of that OVAL Entity or OVAL Field MUST NOT be present in the "results" section of the OVAL Results document; the "oval_definitions" section must not be altered and must be an exact copy of the definitions evaluated. Values MUST NOT be masked in OVAL System Characteristics documents that are not contained within an OVAL Results document. It is possible for masking conflicts to occur where one entity has mask set to true and another entity has mask set to false. A conflict will occur when the mask attribute is set differently on an OVAL Object and matching OVAL State or when more than one OVAL Objects identify the same OVAL Item(s). When such a conflict occurs the result is always to mask the entity.
	Mask bool `xml:"mask,attr,omitempty"`

	// Status: The optional status attribute holds information regarding the success of the data collection. For example, if there was an error collecting a particular piece of data, then the status would be 'error'.
	Status oval_sc.StatusEnumeration `xml:"status,attr,omitempty"`
}

// XSD SimpleType declarations
